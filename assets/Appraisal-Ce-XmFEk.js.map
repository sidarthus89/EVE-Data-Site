{"version":3,"file":"Appraisal-Ce-XmFEk.js","sources":["../../src/features/Appraisal/Appraisal.jsx"],"sourcesContent":["// src/features/Appraisal/Appraisal.jsx\r\nimport { useEffect, useState, useMemo, useCallback } from 'react';\r\nimport {\r\n    formatISK,\r\n    getSecurityColor,\r\n    getStationInfo,\r\n    getRegionInfo\r\n} from '../../utils/common.js';\r\n\r\nimport {\r\n    useReactTable,\r\n    getCoreRowModel,\r\n    getSortedRowModel,\r\n    flexRender\r\n} from '@tanstack/react-table';\r\nimport RegionSelector from '../../components/RegionSelector/RegionSelector';\r\n\r\nfunction flattenMarketData(marketData) {\r\n    const itemMap = new Map();\r\n    function walk(node) {\r\n        if (node.items) {\r\n            for (const item of node.items) {\r\n                if (item.published && item.typeName) {\r\n                    itemMap.set(item.typeName.toLowerCase(), item);\r\n                }\r\n            }\r\n        }\r\n        for (const key in node) {\r\n            if (key !== 'items' && typeof node[key] === 'object') {\r\n                walk(node[key]);\r\n            }\r\n        }\r\n    }\r\n    walk(marketData);\r\n    return itemMap;\r\n}\r\n\r\nexport default function AppraisalTool() {\r\n    const [inputText, setInputText] = useState('');\r\n    const [parsedItems, setParsedItems] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState('');\r\n    const [selectedRegion, setSelectedRegion] = useState({ regionName: 'All Regions', regionID: 'all' });\r\n    const [locations, setLocations] = useState({});\r\n    const [marketTree, setMarketTree] = useState(null);\r\n    const [marketItemMap, setMarketItemMap] = useState(new Map());\r\n    const [locationInfoMap, setlocationInfoMap] = useState({});\r\n\r\n    // Function to build station info map from locations data\r\n    const buildlocationInfoMap = useCallback((locationsData) => {\r\n        const map = {};\r\n        Object.entries(locationsData).forEach(([regionName, regionData]) => {\r\n            Object.entries(regionData).forEach(([constellationName, constellationData]) => {\r\n                if (constellationName === 'regionID') return;\r\n                Object.entries(constellationData).forEach(([systemName, systemData]) => {\r\n                    if (!systemData?.stations) return;\r\n                    Object.entries(systemData.stations).forEach(([stationID, station]) => {\r\n                        map[stationID] = {\r\n                            name: station.locationName,\r\n                            security: station.security ?? systemData.security ?? null,\r\n                            region: regionName,\r\n                            system: systemName,\r\n                            constellation: constellationName,\r\n                        };\r\n                    });\r\n                });\r\n            });\r\n        });\r\n        return map;\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        fetchMarketTree()\r\n            .then(tree => {\r\n                setMarketTree(tree);\r\n                // Flatten and set item map\r\n                if (tree) {\r\n                    let treeArray = tree;\r\n                    if (!Array.isArray(tree) && typeof tree === 'object') {\r\n                        treeArray = Object.entries(tree).map(([name, node]) => ({ ...node, name }));\r\n                    }\r\n                    setMarketItemMap(flattenMarketData(treeArray));\r\n                }\r\n            })\r\n            .catch(err => console.error('❌ Failed to load market-tree from Worker', err));\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        fetchLocations()\r\n            .then(data => {\r\n                setLocations(data);\r\n                setlocationInfoMap(buildlocationInfoMap(data));\r\n            })\r\n            .catch(err => console.error('❌ Failed to load locations from Worker', err));\r\n    }, [buildlocationInfoMap]);\r\n\r\n    // Parse input against local market.json\r\n    const parseInput = () => {\r\n        const lines = inputText\r\n            .split('\\n')\r\n            .map(line => line.trim())\r\n            .filter(Boolean);\r\n\r\n        const parsed = lines.map(line => {\r\n            const match = line.match(/^(.*?)(?:\\s+x(\\d+))?$/);\r\n            const name = match?.[1]?.trim() || '';\r\n            const quantity = parseInt(match?.[2] || '1', 10);\r\n\r\n            const item = marketItemMap.get(name.toLowerCase());\r\n            if (!item) {\r\n                console.warn(`❌ No match found in local market.json for: ${name}`);\r\n                return null;\r\n            }\r\n\r\n            return {\r\n                name: item.typeName,\r\n                quantity,\r\n                typeID: Number(item.typeID)\r\n            };\r\n        });\r\n\r\n        return parsed.filter(item => item && item.typeID);\r\n    };\r\n\r\n    const handleAppraise = async () => {\r\n        setLoading(true);\r\n        setError('');\r\n        setParsedItems([]);\r\n\r\n        try {\r\n            const parsed = parseInput();\r\n\r\n            if (!parsed.length) {\r\n                setError('❌ No valid items found to appraise.');\r\n                setLoading(false);\r\n                return;\r\n            }\r\n\r\n            // Handle \"All Regions\"\r\n            if (selectedRegion.regionID === 'all') {\r\n                // Get all region keys & regionIDs from locations.json\r\n                const allRegions = Object.entries(locations).map(([regionName, data]) => ({\r\n                    regionName,\r\n                    regionID: data.regionID,\r\n                }));\r\n\r\n                // For each item and each region, fetch market orders\r\n                const allRegionData = [];\r\n\r\n                for (const item of parsed) {\r\n                    for (const { regionName, regionID } of allRegions) {\r\n                        try {\r\n                            const orders = await fetchRegionOrdersByID(item.typeID, regionID);\r\n\r\n                            const sell = orders\r\n                                .filter(o => !o.is_buy_order && o.price > 0)\r\n                                .sort((a, b) => a.price - b.price)[0];\r\n\r\n                            const buy = orders\r\n                                .filter(o => o.is_buy_order && o.price > 0)\r\n                                .sort((a, b) => b.price - a.price)[0];\r\n\r\n                            allRegionData.push({\r\n                                ...item,\r\n                                regionName,\r\n                                sellPrice: sell?.price || 0,\r\n                                buyPrice: buy?.price || 0,\r\n                            });\r\n                        } catch (e) {\r\n                            console.error(`❌ Failed fetching orders for typeID ${item.typeID} in region ${regionName}:`, e);\r\n                            allRegionData.push({\r\n                                ...item,\r\n                                regionName,\r\n                                sellPrice: 0,\r\n                                buyPrice: 0,\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n\r\n                setParsedItems(allRegionData);\r\n            } else {\r\n                // Single region selected — same as before\r\n                const regionBlock = locations?.[selectedRegion.regionName];\r\n                const regionID = regionBlock?.regionID;\r\n                if (!regionID) {\r\n                    setError('❌ Invalid region selected');\r\n                    setLoading(false);\r\n                    return;\r\n                }\r\n\r\n                const updatedItems = await Promise.all(parsed.map(async item => {\r\n                    try {\r\n                        const orders = await fetchRegionOrdersByID(item.typeID, regionID);\r\n\r\n                        const sellOrders = orders\r\n                            .filter(o => !o.is_buy_order && o.price > 0)\r\n                            .sort((a, b) => a.price - b.price);\r\n                        const buyOrders = orders\r\n                            .filter(o => o.is_buy_order && o.price > 0)\r\n                            .sort((a, b) => b.price - a.price);\r\n\r\n                        const sell = sellOrders[0];\r\n                        const buy = buyOrders[0];\r\n\r\n                        const sellStation = sell ? {\r\n                            locationId: sell.location_id,\r\n                            name: locationInfoMap[sell.location_id]?.name || 'Unknown Station',\r\n                            security: locationInfoMap[sell.location_id]?.security || 0,\r\n                            region: locationInfoMap[sell.location_id]?.region || 'Unknown Region'\r\n                        } : null;\r\n\r\n                        const buyStation = buy ? {\r\n                            locationId: buy.location_id,\r\n                            name: locationInfoMap[buy.location_id]?.name || 'Unknown Station',\r\n                            security: locationInfoMap[buy.location_id]?.security || 0,\r\n                            region: locationInfoMap[buy.location_id]?.region || 'Unknown Region'\r\n                        } : null;\r\n\r\n                        return {\r\n                            ...item,\r\n                            sellPrice: sell?.price || 0,\r\n                            buyPrice: buy?.price || 0,\r\n                            sellStation: sellStation,\r\n                            buyStation: buyStation\r\n                        };\r\n                    } catch (e) {\r\n                        console.error(`❌ Failed fetching orders for typeID ${item.typeID}:`, e);\r\n                        return {\r\n                            ...item,\r\n                            sellPrice: 0,\r\n                            buyPrice: 0,\r\n                        };\r\n                    }\r\n                }));\r\n\r\n                setParsedItems(updatedItems);\r\n            }\r\n        } catch (e) {\r\n            console.error('Appraisal error:', e);\r\n            setError('❌ Something went wrong during appraisal.');\r\n        }\r\n        setLoading(false);\r\n    };\r\n\r\n    // Sell orders columns (what you can buy items for - lowest prices)\r\n    const sellColumns = useMemo(() => {\r\n        const cols = [\r\n            { accessorKey: 'name', header: 'Item', cell: info => info.getValue() },\r\n            { accessorKey: 'quantity', header: 'Qty', cell: info => info.getValue().toLocaleString() },\r\n        ];\r\n        if (selectedRegion.regionID === 'all') {\r\n            cols.push({ accessorKey: 'regionName', header: 'Region', cell: info => info.getValue() });\r\n        }\r\n        cols.push(\r\n            { accessorKey: 'sellPrice', header: 'Price (each)', cell: info => info.getValue()?.toLocaleString(undefined, { maximumFractionDigits: 2 }) },\r\n            { accessorKey: 'totalSell', header: 'Total Value', cell: info => (info.row.original.sellPrice * info.row.original.quantity).toLocaleString(undefined, { maximumFractionDigits: 2 }) }\r\n        );\r\n        return cols;\r\n    }, [selectedRegion]);\r\n\r\n    // Buy orders columns (what you can sell items for - highest prices)\r\n    const buyColumns = useMemo(() => {\r\n        const cols = [\r\n            { accessorKey: 'name', header: 'Item', cell: info => info.getValue() },\r\n            { accessorKey: 'quantity', header: 'Qty', cell: info => info.getValue().toLocaleString() },\r\n        ];\r\n        if (selectedRegion.regionID === 'all') {\r\n            cols.push({ accessorKey: 'regionName', header: 'Region', cell: info => info.getValue() });\r\n        }\r\n        cols.push(\r\n            { accessorKey: 'buyPrice', header: 'Price (each)', cell: info => info.getValue()?.toLocaleString(undefined, { maximumFractionDigits: 2 }) },\r\n            { accessorKey: 'totalBuy', header: 'Total Value', cell: info => (info.row.original.buyPrice * info.row.original.quantity).toLocaleString(undefined, { maximumFractionDigits: 2 }) }\r\n        );\r\n        return cols;\r\n    }, [selectedRegion]);\r\n\r\n    const sellTable = useReactTable({\r\n        data: parsedItems,\r\n        columns: sellColumns,\r\n        getCoreRowModel: getCoreRowModel(),\r\n        getSortedRowModel: getSortedRowModel(),\r\n        debugTable: false,\r\n    });\r\n\r\n    const buyTable = useReactTable({\r\n        data: parsedItems,\r\n        columns: buyColumns,\r\n        getCoreRowModel: getCoreRowModel(),\r\n        getSortedRowModel: getSortedRowModel(),\r\n        debugTable: false,\r\n    });\r\n\r\n    return (\r\n        <div className=\"appraisal-tool\">\r\n            <div className=\"appraisal-header\">\r\n                <h2>Create Appraisal</h2>\r\n                <p className=\"appraisal-description\">\r\n                    You can use this tool to appraise large sets of items. Paste lists of items from in-game sources (contracts, fits, hangars, ledgers, etc) into the box below.\r\n                </p>\r\n            </div>\r\n\r\n            <div className=\"appraisal-grid\">\r\n                <div className=\"input-section\">\r\n                    <div className=\"control-row\">\r\n                        <label>Region:</label>\r\n                        <RegionSelector\r\n                            selectedRegion={selectedRegion}\r\n                            onRegionChange={setSelectedRegion}\r\n                        />\r\n                    </div>\r\n\r\n                    <textarea\r\n                        className=\"appraisal-input\"\r\n                        rows={12}\r\n                        placeholder=\"Paste your items here...\"\r\n                        value={inputText}\r\n                        onChange={e => setInputText(e.target.value)}\r\n                    />\r\n\r\n                    <div className=\"button-row\">\r\n                        <button className=\"reset-btn\">Reset</button>\r\n                        <button\r\n                            className=\"submit-btn\"\r\n                            onClick={handleAppraise}\r\n                            disabled={!inputText || loading}\r\n                        >\r\n                            {loading ? 'Appraising...' : 'Submit'}\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n\r\n                {parsedItems.length > 0 && (\r\n                    <div className=\"results-section\">\r\n                        <div className=\"totals-banner\">\r\n                            <div className=\"total-value\">\r\n                                <span className=\"value\">{(parsedItems.reduce((sum, item) => sum + (item.sellPrice * item.quantity), 0)).toLocaleString('en-US', { maximumFractionDigits: 1 })}k</span>\r\n                                <span className=\"label\">sell estimate</span>\r\n                            </div>\r\n                            <div className=\"total-value\">\r\n                                <span className=\"value\">{(parsedItems.reduce((sum, item) => sum + (item.buyPrice * item.quantity), 0)).toLocaleString('en-US', { maximumFractionDigits: 1 })}k</span>\r\n                                <span className=\"label\">buy estimate</span>\r\n                            </div>\r\n                            <div className=\"total-value\">\r\n                                <span className=\"value\">\r\n                                    {parsedItems.reduce((sum, item) => sum + item.quantity, 0)}\r\n                                </span>\r\n                                <span className=\"label\">total volume</span>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"market-table-wrapper\">\r\n                            <div className=\"market-table\">\r\n                                <div className=\"thead\">\r\n                                    <div className=\"thead-row\">\r\n                                        <div className=\"column-header\" style={{ width: 200 }}>Item</div>\r\n                                        <div className=\"column-header\" style={{ width: 250 }}>Quantity Location (Buy)</div>\r\n                                        <div className=\"column-header\" style={{ width: 250 }}>Price Location</div>\r\n                                        <div className=\"column-header\" style={{ width: 200 }}>Price</div>\r\n                                        <div className=\"column-header\" style={{ width: 150 }}>Total Value</div>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"table-body\">\r\n                                    {parsedItems.map((item, index) => (\r\n                                        <div key={index} className=\"table-row\">\r\n                                            <div className=\"table-cell\" style={{ width: 200 }}>\r\n                                                {item.name} {item.quantity.toLocaleString()}\r\n                                            </div>\r\n                                            <div className=\"table-cell location-cell\" style={{ width: 250 }}>\r\n                                                {item.buyStation ? (\r\n                                                    <div className=\"station-info\">\r\n                                                        <span className=\"sec-cell\" style={{ color: getSecurityColor(item.buyStation.security) }}>\r\n                                                            {item.buyStation.security >= 0 ? ` ${item.buyStation.security.toFixed(1)}` : item.buyStation.security.toFixed(1)}\r\n                                                        </span>\r\n                                                        <span className=\"location-text\">{item.buyStation.name}</span>\r\n                                                    </div>\r\n                                                ) : '---'}\r\n                                            </div>\r\n                                            <div className=\"table-cell location-cell\" style={{ width: 250 }}>\r\n                                                {item.sellStation ? (\r\n                                                    <div className=\"station-info\">\r\n                                                        <span className=\"sec-cell\" style={{ color: getSecurityColor(item.sellStation.security) }}>\r\n                                                            {item.sellStation.security >= 0 ? ` ${item.sellStation.security.toFixed(1)}` : item.sellStation.security.toFixed(1)}\r\n                                                        </span>\r\n                                                        <span className=\"location-text\">{item.sellStation.name}</span>\r\n                                                    </div>\r\n                                                ) : '---'}\r\n                                            </div>\r\n                                            <div className=\"table-cell\" style={{ width: 200 }}>\r\n                                                {item.buyPrice ? formatISK(item.buyPrice) : '---'} / {item.sellPrice ? formatISK(item.sellPrice) : '---'}\r\n                                            </div>\r\n                                            <div className=\"table-cell\" style={{ width: 150 }}>\r\n                                                {formatISK((item.sellPrice || 0) * item.quantity)}\r\n                                            </div>\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"price-info\">\r\n                            <p>These numbers are from market orders at the time of appraisal. Use the \"Update prices\" button to create a new appraisal based on current prices.</p>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    ); { error && <div className=\"error\">{error}</div> }\r\n\r\n    {\r\n        parsedItems.length > 0 && (\r\n            <>\r\n                <div className=\"market-table-wrapper\">\r\n                    <h3 className=\"market-table-title\">Sell Orders - Lowest Prices (What you pay to buy)</h3>\r\n                    <div className=\"market-table\">\r\n                        <div className=\"thead\">\r\n                            {sellTable.getHeaderGroups().map(headerGroup => (\r\n                                <div key={headerGroup.id} className=\"thead-row\">\r\n                                    {headerGroup.headers.map(header => (\r\n                                        <div\r\n                                            className=\"column-header\"\r\n                                            key={header.id}\r\n                                            style={{ width: header.getSize ? header.getSize() : 120, minWidth: 80 }}\r\n                                        >\r\n                                            {flexRender(header.column.columnDef.header, header.getContext())}\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                        <div className=\"table-body\">\r\n                            {sellTable.getRowModel().rows.map(row => (\r\n                                <div className=\"table-row\" key={row.id}>\r\n                                    {row.getVisibleCells().map(cell => (\r\n                                        <div\r\n                                            className=\"table-cell\"\r\n                                            key={cell.id}\r\n                                            style={{ width: cell.column.getSize ? cell.column.getSize() : 120, minWidth: 80 }}\r\n                                        >\r\n                                            {flexRender(cell.column.columnDef.cell, cell.getContext())}\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"market-table-wrapper\">\r\n                    <h3 className=\"market-table-title\">Buy Orders - Highest Prices (What you get for selling)</h3>\r\n                    <div className=\"market-table\">\r\n                        <div className=\"thead\">\r\n                            {buyTable.getHeaderGroups().map(headerGroup => (\r\n                                <div key={headerGroup.id} className=\"thead-row\">\r\n                                    {headerGroup.headers.map(header => (\r\n                                        <div\r\n                                            className=\"column-header\"\r\n                                            key={header.id}\r\n                                            style={{ width: header.getSize ? header.getSize() : 120, minWidth: 80 }}\r\n                                        >\r\n                                            {flexRender(header.column.columnDef.header, header.getContext())}\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                        <div className=\"table-body\">\r\n                            {buyTable.getRowModel().rows.map(row => (\r\n                                <div className=\"table-row\" key={row.id}>\r\n                                    {row.getVisibleCells().map(cell => (\r\n                                        <div\r\n                                            className=\"table-cell\"\r\n                                            key={cell.id}\r\n                                            style={{ width: cell.column.getSize ? cell.column.getSize() : 120, minWidth: 80 }}\r\n                                        >\r\n                                            {flexRender(cell.column.columnDef.cell, cell.getContext())}\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}"],"names":["AppraisalTool","inputText","setInputText","useState","parsedItems","setParsedItems","loading","setLoading","error","setError","selectedRegion","setSelectedRegion","regionName","regionID","locations","setLocations","marketTree","setMarketTree","marketItemMap","setMarketItemMap","Map","locationInfoMap","setlocationInfoMap","buildlocationInfoMap","useCallback","locationsData","map","Object","entries","forEach","regionData","constellationName","constellationData","systemName","systemData","stations","stationID","station","name","locationName","security","region","system","constellation","useEffect","fetchMarketTree","then","tree","treeArray","Array","isArray","node","marketData","itemMap","walk","items","item","published","typeName","set","toLowerCase","key","flattenMarketData","catch","err","console","fetchLocations","data","sellColumns","useMemo","cols","accessorKey","header","cell","info","getValue","toLocaleString","push","maximumFractionDigits","row","original","sellPrice","quantity","buyColumns","buyPrice","useReactTable","columns","getCoreRowModel","getSortedRowModel","debugTable","jsxs","className","children","jsx","RegionSelector","onRegionChange","rows","placeholder","value","onChange","e","target","onClick","async","parsed","split","line","trim","filter","Boolean","match","parseInt","get","typeID","Number","warn","length","allRegions","allRegionData","orders","fetchRegionOrdersByID","sell","o","is_buy_order","price","sort","a","b","buy","regionBlock","updatedItems","Promise","all","sellOrders","buyOrders","sellStation","locationId","location_id","buyStation","disabled","reduce","sum","style","width","index","color","getSecurityColor","toFixed","formatISK"],"mappings":"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"}