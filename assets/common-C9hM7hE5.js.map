{"version":3,"file":"common-C9hM7hE5.js","sources":["../../src/utils/api.js","../../src/components/RegionSelector/RegionSelector.jsx","../../src/utils/common.js"],"sourcesContent":["// src/utils/api.js\r\n// Shared API module with base URLs for Azure and ESI and retry logic\r\n\r\n// Preferred data source: same-origin static files under /data (served by GitHub Pages or Static Web Apps)\r\n// Optional override: VITE_DATA_BASE (absolute or relative)\r\nconst BASE_URL = import.meta.env.BASE_URL || '/';\r\nconst DEFAULT_DATA_BASE = `${BASE_URL.replace(/\\/$/, '')}/data`;\r\nexport const DATA_BASE = (import.meta.env.VITE_DATA_BASE || '').replace(/\\/$/, '') || DEFAULT_DATA_BASE;\r\n\r\n\r\n// Azure Functions base; allow override for local dev (e.g., VITE_AZURE_BASE=http://localhost:7071/api)\r\nexport const AZURE_BASE = (import.meta.env.VITE_AZURE_BASE || process.env.VITE_AZURE_BASE || 'https://evedatafunc01.azurewebsites.net/api').replace(/\\/$/, '');\r\nexport const ESI_BASE = 'https://esi.evetech.net/latest';\r\n\r\n// Build mode helpers\r\nexport const IS_DEV_BUILD = (import.meta.env.MODE === 'development');\r\n\r\n/**\r\n * Fetch with retry logic and exponential backoff\r\n */\r\nexport async function fetchWithRetry(url, options = {}, retries = 3) {\r\n    for (let i = 0; i < retries; i++) {\r\n        try {\r\n            const response = await fetch(url, options);\r\n\r\n            if (!response.ok) {\r\n                const errorText = await response.text();\r\n                console.error(`❌ HTTP ${response.status}: ${response.statusText}`, errorText);\r\n                throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n            }\r\n\r\n            const contentType = response.headers.get('content-type');\r\n            if (contentType && contentType.includes('application/json')) {\r\n                return await response.json();\r\n            } else {\r\n                const text = await response.text();\r\n                console.error('❌ Non-JSON response:', text);\r\n                throw new Error('Response is not JSON');\r\n            }\r\n        } catch (err) {\r\n            console.error(`❌ Fetch attempt ${i + 1} failed:`, err.message);\r\n            if (i === retries - 1) throw err;\r\n            await new Promise(res => setTimeout(res, Math.pow(2, i) * 1000));\r\n        }\r\n    }\r\n}\r\n\r\n// Try a list of URLs in order and resolve on the first success\r\nasync function fetchAny(urls) {\r\n    let lastErr;\r\n    for (const u of urls.filter(Boolean)) {\r\n        try {\r\n            return await fetchWithRetry(u);\r\n        } catch (e) {\r\n            lastErr = e;\r\n        }\r\n    }\r\n    throw lastErr || new Error('No sources available');\r\n}\r\n\r\nexport function fetchMarketTree() {\r\n    return fetchAny([\r\n        `${DATA_BASE}/market.json`,\r\n        `${DATA_BASE}/market/market.json`,\r\n    ]);\r\n}\r\n\r\nexport function fetchRegions() {\r\n    return fetchAny([\r\n        `${DATA_BASE}/regions.json`,\r\n        `${DATA_BASE}/regions/regions.json`,\r\n    ]).then((data) => {\r\n        if (Array.isArray(data)) return data;\r\n        if (data && Array.isArray(data.regions)) return data.regions;\r\n        throw new Error('Invalid regions.json format');\r\n    });\r\n}\r\n\r\nexport function fetchStructures() {\r\n    return fetchAny([\r\n        `${DATA_BASE}/structures.json`,\r\n        `${DATA_BASE}/structures/structures.json`,\r\n    ]);\r\n}\r\n\r\nexport function fetchStationsNPC() {\r\n    return fetchAny([\r\n        `${DATA_BASE}/stations.json`,\r\n        `${DATA_BASE}/stations/stations_npc.json`,\r\n    ]);\r\n}\r\n\r\nexport function fetchSystems() {\r\n    return fetchAny([\r\n        `${DATA_BASE}/systems.json`,\r\n        `${DATA_BASE}/systems/systems.json`,\r\n    ]);\r\n}\r\n\r\nexport function fetchRegionsWithMarkets() {\r\n    // Project decision: only regions.json will be maintained; treat all regions as market-capable.\r\n    return fetchRegions();\r\n}\r\n\r\n// Lightweight helper: fetch route between two systems via ESI and return jump count\r\nexport async function fetchRouteJumps(originSystemId, destinationSystemId) {\r\n    const o = Number(originSystemId);\r\n    const d = Number(destinationSystemId);\r\n    if (!Number.isFinite(o) || !Number.isFinite(d)) throw new Error('invalid-system-ids');\r\n    const url = `${ESI_BASE}/route/${o}/${d}/`;\r\n    const res = await fetch(url, { headers: { 'User-Agent': 'EVE-Data-Site' } });\r\n    if (!res.ok) throw new Error(`ESI route ${res.status}`);\r\n    const arr = await res.json();\r\n    return Array.isArray(arr) ? Math.max(0, arr.length - 1) : null;\r\n}\r\n\r\n// Precomputed region hauling artifacts (optional). Will try multiple common paths.\r\nexport function fetchPrecomputedRegionHauling() {\r\n    // Disabled: no precomputed region_hauling artifact fetches or telemetry beacons.\r\n    return Promise.reject(new Error('region_hauling_artifacts_disabled'));\r\n}\r\n\r\n// Precomputed per-region best quotes snapshot\r\nexport function fetchRegionOrdersSnapshot(regionId) {\r\n    const id = String(regionId);\r\n    // Fire-and-forget log to Azure Function (silent)\r\n    try {\r\n        const name = `${id}.json`;\r\n        const url = `${AZURE_BASE}/log/request?name=${encodeURIComponent(name)}&source=${encodeURIComponent('spa:region_orders')}`;\r\n        if (typeof navigator !== 'undefined' && typeof navigator.sendBeacon === 'function') {\r\n            navigator.sendBeacon(url, '1');\r\n        } else {\r\n            fetch(url, { method: 'GET', mode: 'no-cors', cache: 'no-store', keepalive: true }).catch(() => { });\r\n        }\r\n    } catch { }\r\n    // Quiet fetch to avoid console noise on 404s (snapshots are optional)\r\n    const url = `${DATA_BASE}/region_orders/${id}.json`;\r\n    return fetch(url).then(async (res) => {\r\n        if (!res.ok) throw new Error(`snapshot-missing:${res.status}`);\r\n        const ct = res.headers.get('content-type') || '';\r\n        if (!ct.includes('application/json')) throw new Error('snapshot-not-json');\r\n        return res.json();\r\n    });\r\n}\r\n\r\n// Resolve repo owner and name from DATA_BASE or window.location (GitHub Pages), fallback to defaults\r\nfunction detectRepoInfoFromEnvironment() {\r\n    try {\r\n        let owner = null, repo = null;\r\n        const defaultOwner = 'sidarthus89';\r\n        const defaultRepo = 'EVE-Data-Site';\r\n        const tryParse = (href) => {\r\n            const u = new URL(href);\r\n            const host = u.hostname || '';\r\n            const pathParts = (u.pathname || '/').split('/').filter(Boolean);\r\n            if (host.endsWith('github.io') && pathParts.length > 0) {\r\n                const sub = host.split('.')[0];\r\n                return { owner: sub || defaultOwner, repo: pathParts[0] || defaultRepo };\r\n            }\r\n            return null;\r\n        };\r\n        // Prefer DATA_BASE if absolute\r\n        if (/^https?:\\/\\//i.test(DATA_BASE)) {\r\n            const info = tryParse(DATA_BASE);\r\n            if (info) return info;\r\n        }\r\n        if (typeof window !== 'undefined') {\r\n            const info = tryParse(window.location.href);\r\n            if (info) return info;\r\n        }\r\n        return { owner: defaultOwner, repo: defaultRepo };\r\n    } catch {\r\n        return { owner: 'sidarthus89', repo: 'EVE-Data-Site' };\r\n    }\r\n}\r\n\r\n// Fetch the ISO timestamp of the most recent commit that touched the data/ folder on gh-pages\r\nexport async function fetchDataLastCommitTime() {\r\n    const { owner, repo } = detectRepoInfoFromEnvironment();\r\n    const apiUrl = `https://api.github.com/repos/${owner}/${repo}/commits?sha=gh-pages&path=data&per_page=1`;\r\n    try {\r\n        const res = await fetch(apiUrl, { headers: { 'Accept': 'application/vnd.github+json' } });\r\n        if (res.ok) {\r\n            const arr = await res.json();\r\n            const first = Array.isArray(arr) ? arr[0] : null;\r\n            const iso = first?.commit?.committer?.date || first?.commit?.author?.date;\r\n            if (iso) return new Date(iso).toISOString();\r\n        }\r\n    } catch { /* noop */ }\r\n    return null;\r\n}\r\n","// src/components/RegionSelector/RegionSelector.jsx\r\n\r\nimport { useEffect, useState, useMemo } from 'react';\r\nimport './RegionSelector.css';\r\nimport { fetchRegions } from '../../utils/api';\r\n\r\n// Source of truth for UI \"hub\" regions; keep in sync with HUB_REGIONS env on Functions\r\nexport const POPULAR_REGION_NAMES = [\r\n    'The Forge',\r\n    'Domain',\r\n    'Heimatar',\r\n    'Sinq Laison',\r\n    'Metropolis',\r\n];\r\n\r\nexport default function RegionSelector({ selectedRegion, onRegionChange, allowAllRegions = true }) {\r\n    const [regions, setRegions] = useState([]);\r\n    const [error, setError] = useState(null);\r\n    const [isLoadingFast, setIsLoadingFast] = useState(true);\r\n\r\n    useEffect(() => {\r\n        async function loadRegionsData() {\r\n            try {\r\n                const regionsArray = await fetchRegions();\r\n                if (!regionsArray || !Array.isArray(regionsArray)) {\r\n                    throw new Error('Invalid regions data format');\r\n                }\r\n\r\n                const PLEX_REGION_ID = 19000001;\r\n                const userSelectableRegions = regionsArray.filter(region => region.regionID !== PLEX_REGION_ID);\r\n\r\n                setRegions(userSelectableRegions);\r\n                setError(null);\r\n                setIsLoadingFast(false);\r\n\r\n            } catch (err) {\r\n                console.error('❌ RegionSelector: Failed to load regions:', err);\r\n                setError(`Failed to load regions: ${err.message}`);\r\n                setRegions([]);\r\n                setIsLoadingFast(false);\r\n            }\r\n        }\r\n\r\n        loadRegionsData();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (allowAllRegions && (!selectedRegion || !selectedRegion.regionID) && regions.length > 0) {\r\n            onRegionChange?.({ regionName: 'All Regions', regionID: 'all' });\r\n        }\r\n    }, [selectedRegion, regions, onRegionChange, allowAllRegions]);\r\n\r\n    const { popularRegionsList, otherRegionsList, allRegionsList } = useMemo(() => {\r\n        const popular = regions.filter(r => POPULAR_REGION_NAMES.includes(r.regionName))\r\n            .sort((a, b) => a.regionName.localeCompare(b.regionName));\r\n        const others = regions.filter(r => !POPULAR_REGION_NAMES.includes(r.regionName))\r\n            .sort((a, b) => a.regionName.localeCompare(b.regionName));\r\n        const all = regions.slice().sort((a, b) => a.regionName.localeCompare(b.regionName));\r\n        return {\r\n            popularRegionsList: popular,\r\n            otherRegionsList: others,\r\n            allRegionsList: all\r\n        };\r\n    }, [regions]);\r\n\r\n    // Render fallback UI if error or empty\r\n    if (error) {\r\n        console.error('❌ RegionSelector error:', error);\r\n        return <div style={{ color: 'red', padding: '1rem' }}>Error loading regions: {error}</div>;\r\n    }\r\n    if (regions.length === 0) {\r\n        const loadingText = isLoadingFast ? 'Loading regions...' : 'Discovering regions from market data...';\r\n        return <div style={{ padding: '1rem' }}>{loadingText}</div>;\r\n    }\r\n\r\n    return (\r\n        <div className=\"region-selector-container\">\r\n            <select\r\n                className=\"region-selector\"\r\n                id=\"region-select\"\r\n                value={selectedRegion?.regionID || (allowAllRegions ? 'all' : '')}\r\n                onChange={e => {\r\n                    const regionID = e.target.value;\r\n                    if (!regionID) {\r\n                        onRegionChange?.(null);\r\n                        return;\r\n                    }\r\n                    if (regionID === 'all') {\r\n                        onRegionChange?.({ regionName: 'All Regions', regionID: 'all' });\r\n                        return;\r\n                    }\r\n                    const region = regions.find(r => String(r.regionID) === regionID);\r\n                    if (region) {\r\n                        onRegionChange?.(region);\r\n                    }\r\n                }}\r\n            >\r\n                {!allowAllRegions && <option value=\"\">*Select a Region*</option>}\r\n                {allowAllRegions && <option value=\"all\">All Regions</option>}\r\n\r\n                {popularRegionsList.length > 0 && (\r\n                    <optgroup label=\"Popular Regions\">\r\n                        {popularRegionsList.map(region => (\r\n                            <option key={region.regionID} value={region.regionID}>\r\n                                {region.regionName}\r\n                            </option>\r\n                        ))}\r\n                    </optgroup>\r\n                )}\r\n\r\n                <optgroup label=\"All Regions (Alphabetical)\">\r\n                    {allRegionsList.map(region => (\r\n                        <option key={`all-${region.regionID}`} value={region.regionID}>\r\n                            {region.regionName}\r\n                        </option>\r\n                    ))}\r\n                </optgroup>\r\n            </select>\r\n        </div>\r\n    );\r\n}\r\n","// src/utils/common.js\r\nexport const truncateToOneDecimal = num => Math.floor(num * 10) / 10;\r\n\r\nexport const capitalizeWords = str =>\r\n    str?.split(' ').map(w => w[0].toUpperCase() + w.slice(1)).join(' ') ?? '';\r\n\r\nexport const formatISK = val =>\r\n    `${val.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })} ISK`;\r\n\r\nexport const formatExpiresIn = mins => {\r\n    const d = Math.floor(mins / 1440), h = Math.floor((mins % 1440) / 60), m = mins % 60;\r\n    return `${d}d ${h}h ${m}m`;\r\n};\r\n\r\nexport const formatRange = range => {\r\n    const r = parseInt(range, 10);\r\n    if (r === -1) return 'Station';\r\n    if (r === 0) return 'System';\r\n    if (r === 32767) return 'Region';\r\n    if (!isNaN(r)) return `${r} ${r === 1 ? 'Jump' : 'Jumps'}`;\r\n    const norm = String(range).trim().toLowerCase();\r\n    return ['station', 'system', 'region'].includes(norm) ? capitalizeWords(norm) : capitalizeWords(range);\r\n};\r\n\r\nexport const getSecurityColor = sec => {\r\n    const thresholds = [\r\n        [1.0, '#2e74df'], [0.9, '#389cf6'], [0.8, '#4acff3'], [0.7, '#62daa6'],\r\n        [0.6, '#71e452'], [0.5, '#eeff83'], [0.4, '#de6a0c'], [0.3, '#ce4611'],\r\n        [0.2, '#bb1014'], [0.1, '#6d221d'], [0.0, '#8f2f69']\r\n    ];\r\n    for (const [threshold, color] of thresholds) if (sec >= threshold) return color;\r\n    return '#8f2f69';\r\n};\r\n\r\nexport const FILTER_OPTIONS = {\r\n    NONE: 'none',\r\n    MILD: 'mild',      // 5th to 95th percentile (1.5 IQR)\r\n    MODERATE: 'moderate', // 10th to 90th percentile (1.0 IQR)\r\n    STRICT: 'strict',   // 25th to 75th percentile (0.5 IQR)\r\n    ULTRA: 'ultra'   // 37.5th to 62.5th percentile (0.25 IQR)\r\n};\r\n\r\nexport function applyOutlierFilter(orders, filterType = FILTER_OPTIONS.NONE) {\r\n    // Always allow filtering even for small sets; require at least 4 points to compute IQR meaningfully\r\n    if (filterType === FILTER_OPTIONS.NONE || orders.length < 4) return orders;\r\n\r\n    const sorted = [...orders].sort((a, b) => a.price - b.price);\r\n\r\n    let lowerPercentile, upperPercentile, iqrMultiplier;\r\n\r\n    switch (filterType) {\r\n        case FILTER_OPTIONS.MILD:\r\n            lowerPercentile = 0.05;\r\n            upperPercentile = 0.95;\r\n            iqrMultiplier = 1.5;\r\n            break;\r\n        case FILTER_OPTIONS.MODERATE:\r\n            lowerPercentile = 0.10;\r\n            upperPercentile = 0.90;\r\n            iqrMultiplier = 1.0;\r\n            break;\r\n        case FILTER_OPTIONS.STRICT:\r\n            lowerPercentile = 0.25;\r\n            upperPercentile = 0.75;\r\n            iqrMultiplier = 0.5;\r\n            break;\r\n        case FILTER_OPTIONS.ULTRA:\r\n            lowerPercentile = 0.375;\r\n            upperPercentile = 0.625;\r\n            iqrMultiplier = 0.25;\r\n            break;\r\n        default:\r\n            return orders;\r\n    }\r\n\r\n    const q1Index = Math.floor(sorted.length * lowerPercentile);\r\n    const q3Index = Math.floor(sorted.length * upperPercentile);\r\n\r\n    const q1 = sorted[q1Index].price;\r\n    const q3 = sorted[q3Index].price;\r\n    const iqr = q3 - q1;\r\n\r\n    const lowerBound = Math.max(q1, q1 - iqrMultiplier * iqr);\r\n    const upperBound = q3 + iqrMultiplier * iqr;\r\n\r\n    return sorted.filter(order => order.price >= lowerBound && order.price <= upperBound);\r\n}\r\n\r\nexport function computeVolumeWeightedAverage(orders) {\r\n    if (!orders || orders.length === 0) return 0;\r\n    const totalVolume = orders.reduce((sum, o) => sum + o.volume_remain, 0);\r\n    const weightedSum = orders.reduce((sum, o) => sum + o.price * o.volume_remain, 0);\r\n    return totalVolume > 0 ? weightedSum / totalVolume : 0;\r\n}\r\n\r\n// Location mapping utilities\r\nexport function buildlocationInfoMap(locationsData) {\r\n    if (!locationsData) return {};\r\n\r\n    const stationInfo = {};\r\n\r\n    Object.entries(locationsData).forEach(([regionName, regionData]) => {\r\n        if (!regionData || typeof regionData !== 'object') return;\r\n\r\n        Object.entries(regionData).forEach(([key, value]) => {\r\n            if (key === 'regionID' || !value || typeof value !== 'object') return;\r\n\r\n            // This is a constellation\r\n            Object.entries(value).forEach(([sysKey, sysValue]) => {\r\n                if (sysKey === 'constellationID' || !sysValue || typeof sysValue !== 'object') return;\r\n\r\n                // This is a system\r\n                const security = sysValue.security;\r\n                const stations = sysValue.stations;\r\n\r\n                if (stations && typeof stations === 'object') {\r\n                    Object.entries(stations).forEach(([stationId, stationData]) => {\r\n                        stationInfo[stationId] = {\r\n                            ...stationData,\r\n                            systemName: sysKey,\r\n                            regionName: regionName,\r\n                            regionID: regionData.regionID,\r\n                            solarSystemID: sysValue.solarSystemID,\r\n                            security: security\r\n                        };\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    });\r\n\r\n    return stationInfo;\r\n}\r\n\r\nexport function buildLocationIDToRegion(locationsData) {\r\n    if (!locationsData) return {};\r\n\r\n    const locationToRegion = {};\r\n\r\n    Object.entries(locationsData).forEach(([regionName, regionData]) => {\r\n        if (!regionData || typeof regionData !== 'object') return;\r\n\r\n        Object.entries(regionData).forEach(([key, value]) => {\r\n            if (key === 'regionID' || !value || typeof value !== 'object') return;\r\n\r\n            // This is a constellation\r\n            Object.entries(value).forEach(([sysKey, sysValue]) => {\r\n                if (sysKey === 'constellationID' || !sysValue || typeof sysValue !== 'object') return;\r\n\r\n                // This is a system\r\n                // Map the system itself\r\n                if (sysValue.solarSystemID) {\r\n                    locationToRegion[sysValue.solarSystemID] = regionName;\r\n                }\r\n\r\n                // Map all stations in this system\r\n                const stations = sysValue.stations;\r\n                if (stations && typeof stations === 'object') {\r\n                    Object.keys(stations).forEach(stationId => {\r\n                        locationToRegion[stationId] = regionName;\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    });\r\n\r\n    return locationToRegion;\r\n}\r\n\r\n// ================================\r\n// UNIFIED STATION/REGION UTILITIES\r\n// ================================\r\n\r\n/**\r\n * Get region information by region ID or name\r\n */\r\nexport function getRegionInfo(regionRef, locationsData) {\r\n    if (!regionRef || !locationsData) return null;\r\n\r\n    // If it's a number, find by regionID\r\n    if (!isNaN(regionRef)) {\r\n        const regionID = Number(regionRef);\r\n        for (const [regionName, regionData] of Object.entries(locationsData)) {\r\n            if (regionData?.regionID === regionID) {\r\n                return { regionID, regionName, data: regionData };\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    // If it's a string, find by name\r\n    const regionData = locationsData[regionRef];\r\n    if (regionData?.regionID) {\r\n        return { regionID: regionData.regionID, regionName: regionRef, data: regionData };\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\n/**\r\n * Get station information by station ID\r\n */\r\nexport function getStationInfo(stationId, locationsData) {\r\n    if (!stationId || !locationsData) return null;\r\n\r\n    for (const [regionName, regionData] of Object.entries(locationsData)) {\r\n        if (!regionData || typeof regionData !== 'object') continue;\r\n\r\n        for (const [constKey, constData] of Object.entries(regionData)) {\r\n            if (constKey === 'regionID' || !constData || typeof constData !== 'object') continue;\r\n\r\n            for (const [sysKey, sysData] of Object.entries(constData)) {\r\n                if (sysKey === 'constellationID' || !sysData || typeof sysData !== 'object') continue;\r\n\r\n                const stations = sysData.stations;\r\n                if (stations && stations[stationId]) {\r\n                    return {\r\n                        stationId,\r\n                        locationName: stations[stationId].locationName,\r\n                        systemName: sysData.solarSystemName,\r\n                        systemId: sysData.solarSystemID,\r\n                        security: sysData.security,\r\n                        regionName,\r\n                        regionId: regionData.regionID,\r\n                        constellationName: constData.constellationName\r\n                    };\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\n/**\r\n * Get system information by system ID\r\n */\r\nexport function getSystemInfo(systemId, locationsData) {\r\n    if (!systemId || !locationsData) return null;\r\n\r\n    for (const [regionName, regionData] of Object.entries(locationsData)) {\r\n        if (!regionData || typeof regionData !== 'object') continue;\r\n\r\n        for (const [constKey, constData] of Object.entries(regionData)) {\r\n            if (constKey === 'regionID' || !constData || typeof constData !== 'object') continue;\r\n\r\n            for (const [sysKey, sysData] of Object.entries(constData)) {\r\n                if (sysKey === 'constellationID' || !sysData || typeof sysData !== 'object') continue;\r\n\r\n                if (sysData.solarSystemID === systemId) {\r\n                    return {\r\n                        systemId,\r\n                        systemName: sysData.solarSystemName,\r\n                        security: sysData.security,\r\n                        regionName,\r\n                        regionId: regionData.regionID,\r\n                        constellationName: constData.constellationName,\r\n                        stations: sysData.stations || {}\r\n                    };\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\n/**\r\n * Filter regions by security status\r\n */\r\nexport function filterRegionsBySecurity(locationsData, securityFilter) {\r\n    if (!locationsData || securityFilter === 'Any Security') return locationsData;\r\n\r\n    const filtered = {};\r\n\r\n    Object.entries(locationsData).forEach(([regionName, regionData]) => {\r\n        if (!regionData || typeof regionData !== 'object') return;\r\n\r\n        let hasMatchingSystems = false;\r\n        const filteredRegion = { ...regionData };\r\n\r\n        Object.entries(regionData).forEach(([constKey, constData]) => {\r\n            if (constKey === 'regionID' || !constData || typeof constData !== 'object') return;\r\n\r\n            const filteredConstellation = { ...constData };\r\n\r\n            Object.entries(constData).forEach(([sysKey, sysData]) => {\r\n                if (sysKey === 'constellationID' || !sysData || typeof sysData !== 'object') return;\r\n\r\n                const security = sysData.security;\r\n                let includeSystem = false;\r\n\r\n                switch (securityFilter) {\r\n                    case 'High Sec Only':\r\n                        includeSystem = security >= 0.5;\r\n                        break;\r\n                    case 'Low Sec':\r\n                        includeSystem = security > 0.0 && security < 0.5;\r\n                        break;\r\n                    case 'Null Sec':\r\n                        includeSystem = security <= 0.0;\r\n                        break;\r\n                    default:\r\n                        includeSystem = true;\r\n                }\r\n\r\n                if (includeSystem) {\r\n                    hasMatchingSystems = true;\r\n                } else {\r\n                    delete filteredConstellation[sysKey];\r\n                }\r\n            });\r\n\r\n            if (Object.keys(filteredConstellation).length > 1) { // More than just constellationID\r\n                filteredRegion[constKey] = filteredConstellation;\r\n            }\r\n        });\r\n\r\n        if (hasMatchingSystems) {\r\n            filtered[regionName] = filteredRegion;\r\n        }\r\n    });\r\n\r\n    return filtered;\r\n}\r\n\r\nexport function flattenMarketTree(marketTree) {\r\n    const flattened = [];\r\n\r\n    function walk(node, path = []) {\r\n        for (const [key, value] of Object.entries(node)) {\r\n            if (key === '_info') continue;\r\n\r\n            if (Array.isArray(value?.items)) {\r\n                for (const item of value.items) {\r\n                    flattened.push({\r\n                        ...item,\r\n                        categoryPath: [...path, key].join(' > ')\r\n                    });\r\n                }\r\n            }\r\n\r\n            // Recurse into subcategories\r\n            for (const [subKey, subValue] of Object.entries(value)) {\r\n                if (subKey !== 'items' && subKey !== '_info' && typeof subValue === 'object') {\r\n                    walk({ [subKey]: subValue }, [...path, key]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    walk(marketTree);\r\n    return flattened;\r\n}\r\n"],"names":["DEFAULT_DATA_BASE","replace","DATA_BASE","AZURE_BASE","VITE_AZURE_BASE","ESI_BASE","async","fetchWithRetry","url","options","retries","i","response","fetch","ok","errorText","text","console","error","status","statusText","Error","contentType","headers","get","includes","json","err","message","Promise","res","setTimeout","Math","pow","fetchAny","urls","lastErr","u","filter","Boolean","e","fetchMarketTree","fetchRegions","then","data","Array","isArray","regions","fetchStructures","fetchStationsNPC","fetchRouteJumps","originSystemId","destinationSystemId","o","Number","d","isFinite","arr","max","length","fetchRegionOrdersSnapshot","regionId","id","String","name","encodeURIComponent","navigator","sendBeacon","method","mode","cache","keepalive","catch","fetchDataLastCommitTime","owner","repo","defaultOwner","defaultRepo","tryParse","href","URL","host","hostname","pathParts","pathname","split","endsWith","test","info","window","location","detectRepoInfoFromEnvironment","apiUrl","Accept","first","iso","commit","committer","date","author","Date","toISOString","POPULAR_REGION_NAMES","RegionSelector","selectedRegion","onRegionChange","allowAllRegions","setRegions","useState","setError","isLoadingFast","setIsLoadingFast","useEffect","regionsArray","PLEX_REGION_ID","userSelectableRegions","region","regionID","loadRegionsData","regionName","popularRegionsList","otherRegionsList","allRegionsList","useMemo","r","sort","a","b","localeCompare","slice","jsxs","style","color","padding","children","loadingText","jsx","className","value","onChange","target","find","label","map","truncateToOneDecimal","num","floor","capitalizeWords","str","w","toUpperCase","join","formatISK","val","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","formatExpiresIn","mins","formatRange","range","parseInt","isNaN","norm","trim","toLowerCase","getSecurityColor","sec","thresholds","threshold","FILTER_OPTIONS","applyOutlierFilter","orders","filterType","sorted","price","lowerPercentile","upperPercentile","iqrMultiplier","q1Index","q3Index","q1","q3","iqr","lowerBound","upperBound","order","flattenMarketTree","marketTree","flattened","walk","node","path","key","Object","entries","items","item","push","categoryPath","subKey","subValue"],"mappings":"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"}