{"version":3,"file":"RegionHauling-Do0KAMP8.js","sources":["../../src/features/TradeTools/RegionHauling.jsx"],"sourcesContent":["// src/features/TradeTools/RegionHauling.jsx\r\nimport React, { useState, useEffect, useMemo } from 'react';\r\nimport RegionSelector from '../../components/RegionSelector/RegionSelector.jsx';\r\nimport { getSecurityColor, getStationInfo, getRegionInfo } from '../../utils/common.js';\r\nimport { fetchMarketOrders, fetchRegionHaulingSnapshotsOnly } from '../../utils/market.js';\r\nimport { fetchRegions, fetchStructures, fetchStationsNPC, fetchMarketTree, fetchRouteJumps, fetchDataLastCommitTime } from '../../utils/api.js';\r\nimport './RegionHauling.css';\r\n\r\n// Utility functions for formatting (replaces eveTradeAPI utils)\r\nconst utils = {\r\n    formatNumber: (value, decimals = 2) => {\r\n        if (value === null || value === undefined || isNaN(value)) return '0';\r\n        const num = parseFloat(value);\r\n        return num.toLocaleString('en-US', {\r\n            minimumFractionDigits: decimals,\r\n            maximumFractionDigits: decimals\r\n        });\r\n    }\r\n};\r\n\r\nconst INITIAL_FORM = {\r\n    fromRegion: null,\r\n    toRegion: null,\r\n    nearbyOnly: false,\r\n    minProfit: '500000', // Default value for Min Profit\r\n    maxWeight: '',\r\n    minROI: 4, // Default value, not placeholder\r\n    maxJumps: '',\r\n    maxBudget: '',\r\n    salesTax: 7.5, // Default to \"No Skill\"\r\n    securityStatus: 'any',\r\n    structureType: 'all',\r\n    routePreference: 'safest',\r\n    hideOutOfStock: false\r\n};\r\n\r\nexport default function RegionHauling() {\r\n    const [formData, setFormData] = useState(INITIAL_FORM);\r\n    const [regionsData, setRegionsData] = useState(null);\r\n    const [marketTree, setMarketTree] = useState(null);\r\n    const [loading, setLoading] = useState(false);\r\n    const [results, setResults] = useState([]);\r\n    const [error, setError] = useState(null);\r\n    const [usingFallback, setUsingFallback] = useState(false);\r\n    const [nearbyRegions, setNearbyRegions] = useState([]);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [itemsPerPage] = useState(50);\r\n    const [isFormSticky, setIsFormSticky] = useState(false);\r\n    const [formCollapsed, setFormCollapsed] = useState(false);\r\n    const [sortConfig, setSortConfig] = useState({ key: 'Net Profit', direction: 'desc' });\r\n    const [showResults, setShowResults] = useState(false);\r\n    // Timer state for \"Time Since Last Update\" based on GitHub data commits\r\n    const [lastResultsAt, setLastResultsAt] = useState(null);\r\n    const [nowTick, setNowTick] = useState(Date.now());\r\n    // Column widths for resizable headers (px)\r\n    const [colWidths, setColWidths] = useState({\r\n        'Item': 140,\r\n        'From': 240,\r\n        'Quantity': 110,\r\n        'Buy Price': 130,\r\n        'Total Buy Price': 140,\r\n        'To': 240,\r\n        'Sell Price': 140,\r\n        'Net Profit': 140,\r\n        'Jumps': 90,\r\n        'Profit per Jump': 150,\r\n        'Profit Per Item': 130,\r\n        'ROI': 100,\r\n        'Total Volume (m³)': 120,\r\n    });\r\n\r\n    const startResize = (key, startX, startWidth) => {\r\n        const onMove = (e) => {\r\n            const dx = (e.clientX || 0) - startX;\r\n            setColWidths(prev => ({ ...prev, [key]: Math.max(60, Math.min(800, Math.round(startWidth + dx))) }));\r\n        };\r\n        const onUp = () => {\r\n            window.removeEventListener('mousemove', onMove);\r\n            window.removeEventListener('mouseup', onUp);\r\n        };\r\n        window.addEventListener('mousemove', onMove);\r\n        window.addEventListener('mouseup', onUp);\r\n    };\r\n\r\n    const HeaderCell = ({ label }) => {\r\n        const width = colWidths[label] || 120;\r\n        return (\r\n            <th\r\n                onClick={() => handleSort(label)}\r\n                style={{ width, minWidth: width, maxWidth: width, position: 'relative' }}\r\n            >\r\n                {label}{sortConfig.key === label ? (sortConfig.direction === 'asc' ? ' ▲' : ' ▼') : ''}\r\n                <span\r\n                    className=\"col-resizer\"\r\n                    onMouseDown={(e) => {\r\n                        e.stopPropagation();\r\n                        startResize(label, e.clientX || 0, width);\r\n                    }}\r\n                    title=\"Drag to resize\"\r\n                />\r\n            </th>\r\n        );\r\n    };\r\n\r\n    const cellStyle = (label) => {\r\n        const width = colWidths[label] || 120;\r\n        return { width, minWidth: width, maxWidth: width };\r\n    };\r\n\r\n    // Fetch item details (volume and name) from precomputed market.json\r\n    const fetchItemDetails = (() => {\r\n        let cache = null;\r\n        const buildIndex = (tree) => {\r\n            const map = new Map();\r\n            const walk = (node) => {\r\n                if (!node || typeof node !== 'object') return;\r\n                if (Array.isArray(node.items)) {\r\n                    for (const it of node.items) {\r\n                        const id = Number(it.typeID);\r\n                        if (!map.has(id)) {\r\n                            map.set(id, { name: it.typeName, volume: it.volume || 0.01 });\r\n                        }\r\n                    }\r\n                }\r\n                for (const k of Object.keys(node)) {\r\n                    if (k !== 'items' && k !== '_info') walk(node[k]);\r\n                }\r\n            };\r\n            walk(tree);\r\n            return map;\r\n        };\r\n        return async (typeId) => {\r\n            try {\r\n                if (!cache) {\r\n                    const tree = await fetchMarketTree();\r\n                    cache = buildIndex(tree);\r\n                }\r\n                const rec = cache.get(Number(typeId));\r\n                return { volume: rec?.volume || 0.01, name: rec?.name || `Item ${typeId}` };\r\n            } catch {\r\n                return { volume: 0.01, name: `Item ${typeId}` };\r\n            }\r\n        };\r\n    })();\r\n\r\n    // Calculate jumps between two systems using ESI route; tiny in-memory cache\r\n    const jumpCache = React.useRef(new Map());\r\n    const calculateJumps = async (fromSystemId, toSystemId) => {\r\n        const key = `${fromSystemId}->${toSystemId}`;\r\n        if (jumpCache.current.has(key)) return jumpCache.current.get(key);\r\n        try {\r\n            const hops = await fetchRouteJumps(fromSystemId, toSystemId);\r\n            jumpCache.current.set(key, hops);\r\n            return hops;\r\n        } catch {\r\n            jumpCache.current.set(key, null);\r\n            return null;\r\n        }\r\n    };\r\n\r\n    // Handle form sticky behavior on scroll\r\n    useEffect(() => {\r\n        const handleScroll = () => {\r\n            const formElement = document.querySelector('.hauling-form');\r\n            if (formElement) {\r\n                const formRect = formElement.getBoundingClientRect();\r\n                const navbarHeight = 60; // Adjust based on your navbar height\r\n                setIsFormSticky(formRect.top <= navbarHeight);\r\n            }\r\n        };\r\n\r\n        window.addEventListener('scroll', handleScroll);\r\n        return () => window.removeEventListener('scroll', handleScroll);\r\n    }, []);\r\n\r\n    // Copy location name to clipboard\r\n    const copyToClipboard = async (text) => {\r\n        try {\r\n            await navigator.clipboard.writeText(text);\r\n        } catch (err) {\r\n        }\r\n    };\r\n\r\n    // Fast region loading using same system as Market.jsx\r\n    useEffect(() => {\r\n        fetchRegions()\r\n            .then(regions => {\r\n                setRegionsData(regions);\r\n            })\r\n            .catch(err => {\r\n                console.error('🚛 ❌ Failed to load regions', err);\r\n                setError('Failed to load regions data');\r\n            });\r\n    }, []);\r\n\r\n    // Memoized regions for performance (same as Market.jsx)\r\n    const regions = useMemo(() => {\r\n        if (!regionsData) return [];\r\n\r\n        // Convert to consistent format\r\n        return regionsData.map(region => ({\r\n            regionID: region.region_id || region.regionID,\r\n            regionName: region.region_name || region.regionName || region.name,\r\n            ...region\r\n        }));\r\n    }, [regionsData]);\r\n\r\n    // Calculate nearby regions when fromRegion changes (simplified without EVE-Trade data)\r\n    useEffect(() => {\r\n        if (formData.fromRegion && regions.length > 0) {\r\n            setNearbyRegions([]);\r\n        } else {\r\n            setNearbyRegions([]);\r\n        }\r\n    }, [formData.fromRegion, regions]);\r\n\r\n    // Auto-set toRegion when nearbyOnly is checked (only if nearby regions available)\r\n    useEffect(() => {\r\n        if (formData.nearbyOnly && nearbyRegions.length > 0) {\r\n            setFormData(prev => ({\r\n                ...prev,\r\n                toRegion: {\r\n                    regionID: 'nearby',\r\n                    regionName: `${nearbyRegions.length} Nearby Regions`\r\n                }\r\n            }));\r\n        } else if (!formData.nearbyOnly && formData.toRegion?.regionID === 'nearby') {\r\n            setFormData(prev => ({\r\n                ...prev,\r\n                toRegion: null\r\n            }));\r\n        }\r\n    }, [formData.nearbyOnly, nearbyRegions]);\r\n\r\n    // Data transformation function to convert API/market data to display format\r\n    const transformApiResponseToDisplayFormat = async (apiData, formData) => {\r\n        // Load static structure and station data for mapping (from /public/data)\r\n        const [structures, stations] = await Promise.all([\r\n            fetchStructures(),\r\n            fetchStationsNPC()\r\n        ]);\r\n        const stationMap = new Map(stations.map(s => [Number(s.station_id || s.stationID), s]));\r\n        const structMap = new Map(structures.map(s => [Number(s.structureID ?? s.stationID), s]));\r\n\r\n        if (!apiData || !Array.isArray(apiData)) {\r\n            return [];\r\n        }\r\n\r\n        // Get cargo capacity from form (convert to number, default to unlimited if not specified)\r\n        const cargoCapacity = formData.maxWeight ? parseFloat(formData.maxWeight) : null;\r\n\r\n        const transformedTrades = [];\r\n\r\n        for (const trade of apiData) {\r\n\r\n            // Get item details (volume and name) from ESI\r\n            const itemDetails = await fetchItemDetails(trade.type_id);\r\n\r\n            // Calculate maximum units considering cargo capacity and budget\r\n            let maxUnits = trade.max_volume || 0; // available tradable units\r\n            if (cargoCapacity && itemDetails.volume > 0) {\r\n                const cargoLimitedUnits = Math.floor(cargoCapacity / itemDetails.volume);\r\n                maxUnits = Math.min(maxUnits, cargoLimitedUnits);\r\n            }\r\n            if (formData.maxBudget) {\r\n                const budget = Number(formData.maxBudget) || 0;\r\n                const unitPrice = Number(trade.sell_price || 0);\r\n                if (unitPrice > 0) {\r\n                    const budgetLimitedUnits = Math.floor(budget / unitPrice);\r\n                    maxUnits = Math.min(maxUnits, budgetLimitedUnits);\r\n                }\r\n            }\r\n            // Compute total volume\r\n            const totalVolume = Math.floor((maxUnits || 0) * (itemDetails.volume || 0));\r\n\r\n            // Use enhanced data directly from the API if available\r\n            // If not, fall back to local lookup methods\r\n            let originStationName, destinationStationName, originIsNPC, destinationIsNPC, jumps;\r\n            // Ensure info objects are declared in outer scope for later use\r\n            let originInfo = null, destInfo = null;\r\n\r\n            // Use the enhanced data from our API if available\r\n            if (trade.origin_name && trade.destination_name) {\r\n                originStationName = trade.origin_name;\r\n                destinationStationName = trade.destination_name;\r\n                originIsNPC = (trade.origin_is_npc ?? true) === true;\r\n                destinationIsNPC = (trade.destination_is_npc ?? true) === true;\r\n                jumps = trade.jumps ?? 'N/A';\r\n            } else {\r\n                // Fall back to local lookup for older API responses\r\n                const originId = trade.origin_id ?? trade.from_location ?? trade.source_station_id;\r\n                const destId = trade.destination_id ?? trade.to_location ?? trade.destination_station_id;\r\n                originInfo = stationMap.get(originId) || structMap.get(originId) || {};\r\n                destInfo = stationMap.get(destId) || structMap.get(destId) || {};\r\n\r\n                // Log missing structure IDs for debugging\r\n                if (!originInfo.name) {\r\n                    console.warn(`Missing origin structure ID: ${originId}`);\r\n                }\r\n                if (!destInfo.name) {\r\n                    console.warn(`Missing destination structure ID: ${destId}`);\r\n                }\r\n\r\n                originStationName = originInfo.name || `Unknown Station (ID: ${originId})`;\r\n                destinationStationName = destInfo.name || `Unknown Station (ID: ${destId})`;\r\n\r\n                // Ensure player structures are displayed correctly; default unknown to NPC (true)\r\n                const originIsNpcComputed = originInfo && (originInfo.type === 'station' || originInfo.is_npc === 1 || originInfo.is_npc === true);\r\n                const destIsNpcComputed = destInfo && (destInfo.type === 'station' || destInfo.is_npc === 1 || destInfo.is_npc === true);\r\n                originIsNPC = originIsNpcComputed === undefined ? true : !!originIsNpcComputed;\r\n                destinationIsNPC = destIsNpcComputed === undefined ? true : !!destIsNpcComputed;\r\n\r\n                // Calculate jumps between systems\r\n                jumps = null;\r\n                const fromSystemId = trade.origin_system_id || originInfo?.system_id || originInfo?.systemID || originInfo?.solarSystemID;\r\n                const toSystemId = trade.destination_system_id || destInfo?.system_id || destInfo?.systemID || destInfo?.solarSystemID;\r\n                if (fromSystemId && toSystemId) {\r\n                    jumps = await calculateJumps(fromSystemId, toSystemId);\r\n                }\r\n            }\r\n\r\n            // Get the security status data\r\n            let originSecurity = trade.origin_security ?? (originInfo ? (originInfo.security_status ?? originInfo.security ?? null) : null);\r\n            let destSecurity = trade.destination_security ?? (destInfo ? (destInfo.security_status ?? destInfo.security ?? null) : null);\r\n            // Coerce to numbers when possible\r\n            originSecurity = (originSecurity !== null && originSecurity !== undefined) ? Number(originSecurity) : originSecurity;\r\n            destSecurity = (destSecurity !== null && destSecurity !== undefined) ? Number(destSecurity) : destSecurity;\r\n\r\n            // Calculate profit per jump\r\n            const profitPerJump = trade.profit_per_jump ?? (jumps && typeof jumps === 'number' && jumps > 0 ?\r\n                ((trade.profit_per_unit || 0) * maxUnits) / jumps : null);\r\n\r\n            transformedTrades.push({\r\n                'Item': trade.name || itemDetails.name,\r\n                'From': {\r\n                    name: originStationName,\r\n                    security: originSecurity,\r\n                    isNPC: originIsNPC,\r\n                    systemId: trade.origin_system_id || (originInfo ? originInfo.system_id : null)\r\n                },\r\n                'To': {\r\n                    name: destinationStationName,\r\n                    security: destSecurity,\r\n                    isNPC: destinationIsNPC,\r\n                    systemId: trade.destination_system_id || (destInfo ? destInfo.system_id : null)\r\n                },\r\n                'Buy Price': trade.sell_price || 0,\r\n                'Sell Price': trade.buy_price || 0,\r\n                'Profit Per Unit': trade.profit_per_unit || 0,\r\n                'Profit Percentage': trade.profit_margin || 0,\r\n                'Quantity': maxUnits,\r\n                'Total Volume (m3)': totalVolume,\r\n                'Item Volume': trade.volume || itemDetails.volume,\r\n                'Jumps': jumps,\r\n                'Profit per Jump': profitPerJump,\r\n                'Total Profit': trade.total_profit || ((trade.profit_per_unit || 0) * maxUnits),\r\n                'ROI': trade.profit_margin,\r\n                '_rawData': trade\r\n            });\r\n        }\r\n\r\n        // Apply post-transform filters\r\n        let finalTrades = transformedTrades;\r\n\r\n        // Drop rows that end up with zero quantity after budget/capacity limits\r\n        finalTrades = finalTrades.filter(t => (Number(t['Quantity']) || 0) > 0);\r\n\r\n        // Re-apply Budget / Min Profit / ROI filters using computed quantities\r\n        const minProfitFilter = parseFloat(formData.minProfit || '0');\r\n        const minRoiFilter = parseFloat(formData.minROI || '0');\r\n        const maxBudgetFilter = formData.maxBudget ? parseFloat(formData.maxBudget) : null;\r\n\r\n        finalTrades = finalTrades.filter(t => {\r\n            const qty = Number(t['Quantity']) || 0;\r\n            const buyPrice = Number(t['Buy Price']) || 0;\r\n            const totalBuy = buyPrice * qty;\r\n            const totalProfit = Number(t['Total Profit']) || 0;\r\n            const roiPct = Number(t['Profit Percentage']) || 0;\r\n\r\n            const meetsBudget = maxBudgetFilter == null || totalBuy <= maxBudgetFilter;\r\n            const meetsProfit = totalProfit >= minProfitFilter;\r\n            const meetsRoi = roiPct >= minRoiFilter;\r\n            return meetsBudget && meetsProfit && meetsRoi;\r\n        });\r\n        // Security filter\r\n        if (formData.securityStatus && formData.securityStatus !== 'any') {\r\n            const isHigh = s => typeof s === 'number' && s >= 0.5;\r\n            const isLow = s => typeof s === 'number' && s > 0 && s < 0.5;\r\n            const isNull = s => typeof s === 'number' && s <= 0;\r\n            finalTrades = finalTrades.filter(t => {\r\n                const os = t.From?.security;\r\n                const ds = t.To?.security;\r\n                if (os == null || ds == null) return false;\r\n                if (formData.securityStatus === 'highsec') return isHigh(os) && isHigh(ds);\r\n                if (formData.securityStatus === 'lowsec') return isLow(os) && isLow(ds);\r\n                if (formData.securityStatus === 'nullsec') return isNull(os) && isNull(ds);\r\n                return true;\r\n            });\r\n        }\r\n        // Structure type filter\r\n        if (formData.structureType && formData.structureType !== 'all') {\r\n            finalTrades = finalTrades.filter(t => {\r\n                const oNpc = t.From?.isNPC === true;\r\n                const dNpc = t.To?.isNPC === true;\r\n                if (formData.structureType === 'avoid-player') return oNpc && dNpc; // NPC-only\r\n                if (formData.structureType === 'avoid-npc') return !oNpc && !dNpc; // Player-only\r\n                return true;\r\n            });\r\n        }\r\n        // Max jumps filter\r\n        if (formData.maxJumps) {\r\n            const maxJumps = Number(formData.maxJumps);\r\n            if (Number.isFinite(maxJumps)) {\r\n                finalTrades = finalTrades.filter(t => typeof t.Jumps === 'number' ? t.Jumps <= maxJumps : true);\r\n            }\r\n        }\r\n        return finalTrades;\r\n    };\r\n\r\n    const handleInputChange = (field, value) => {\r\n        setFormData(prev => ({\r\n            ...prev,\r\n            [field]: value,\r\n        }));\r\n    };\r\n\r\n    // Calculate sales tax based on Accounting skill level\r\n    const calculateSalesTax = (skillLevel) => {\r\n        const baseTax = 7.5;\r\n        const reductionPerLevel = 0.11; // 11% reduction per level\r\n        return Number((baseTax * (1 - (skillLevel * reductionPerLevel))).toFixed(3));\r\n    };\r\n\r\n    // Sales tax options based on Accounting skill levels\r\n    const salesTaxOptions = [\r\n        { level: 0, tax: 7.5, label: \"No Skill: 7.5%\" },\r\n        { level: 1, tax: 6.675, label: \"Lvl I: 6.675%\" },\r\n        { level: 2, tax: 5.85, label: \"Lvl II: 5.85%\" },\r\n        { level: 3, tax: 5.025, label: \"Lvl III: 5.025%\" },\r\n        { level: 4, tax: 4.2, label: \"Lvl IV: 4.2%\" },\r\n        { level: 5, tax: 3.375, label: \"Lvl V: 3.375%\" }\r\n    ];\r\n\r\n    // Security status options\r\n    const securityStatusOptions = [\r\n        { value: 'any', label: 'Any' },\r\n        { value: 'highsec', label: 'High-Sec' },\r\n        { value: 'lowsec', label: 'Low-Sec' },\r\n        { value: 'nullsec', label: 'Null-Sec' }\r\n    ];\r\n\r\n    // Structure type options\r\n    const structureTypeOptions = [\r\n        { value: 'all', label: 'All' },\r\n        { value: 'avoid-player', label: 'Avoid Player Structures' },\r\n        { value: 'avoid-npc', label: 'Avoid NPC Stations' }\r\n    ];\r\n\r\n    // Route preference options\r\n    const routePreferenceOptions = [\r\n        { value: 'safest', label: 'Safest Route' },\r\n        { value: 'shortest', label: 'Shortest Route' }\r\n    ];\r\n\r\n    const handleFromRegionChange = (region) => {\r\n        setFormData(prev => ({\r\n            ...prev,\r\n            fromRegion: region,\r\n            // Reset nearby only if it was previously set\r\n            nearbyOnly: prev.nearbyOnly && region ? prev.nearbyOnly : false\r\n        }));\r\n    };\r\n\r\n    const handleToRegionChange = (region) => {\r\n        setFormData(prev => ({\r\n            ...prev,\r\n            toRegion: region,\r\n            nearbyOnly: false // Reset nearby only when manually selecting to region\r\n        }));\r\n    };\r\n\r\n    // New function to fetch and process market orders (snapshots only)\r\n    const fetchAndProcessMarketOrders = async (fromRegionId, toRegionId, formData) => {\r\n        try {\r\n            // Use only GitHub snapshots: derive from region_orders (no region_hauling artifacts)\r\n            const regionHaulingData = await fetchRegionHaulingSnapshotsOnly(fromRegionId, toRegionId);\r\n\r\n            // Filter and process orders to find profitable trades\r\n            const profitableTrades = regionHaulingData.filter(route => {\r\n                // Prefer total profit when available; fall back to unit profit * quantity\r\n                const unitProfit = (route.profit_per_unit ?? (route.buy_price - route.sell_price) ?? 0);\r\n                const quantity = (route.max_volume ?? 0);\r\n                const totalProfit = (route.total_profit ?? (unitProfit * quantity));\r\n\r\n                const roi = (route.profit_margin ?? (\r\n                    route.sell_price ? ((unitProfit / route.sell_price) * 100) : 0\r\n                ));\r\n\r\n                const meetsProfit = totalProfit >= parseFloat(formData.minProfit || 0);\r\n\r\n                // If budget is provided, approximate total buy cost as unit price * quantity\r\n                const totalBuyCost = (route.sell_price ?? 0) * quantity;\r\n                const meetsBudget = !formData.maxBudget || totalBuyCost <= parseFloat(formData.maxBudget);\r\n\r\n                return meetsProfit && (roi >= parseFloat(formData.minROI || 0)) && meetsBudget;\r\n            });\r\n\r\n            // Transform data for display\r\n            return await transformApiResponseToDisplayFormat(profitableTrades, formData);\r\n        } catch (error) {\r\n            console.error('Error fetching or processing market orders:', error);\r\n            throw new Error('Failed to fetch market orders.');\r\n        }\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setResults([]);\r\n        setCurrentPage(1);\r\n        setLoading(true);\r\n        setError(null);\r\n        setShowResults(false);\r\n\r\n        if (!formData.fromRegion?.regionID || !formData.toRegion?.regionID) {\r\n            setError('Please select both source and destination regions');\r\n            setLoading(false);\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const fromRegionId = Number(formData.fromRegion.regionID);\r\n            const toRegionId = Number(formData.toRegion.regionID);\r\n\r\n            console.log(`🚛 Searching for trade routes from ${formData.fromRegion.regionName} (${fromRegionId}) to ${formData.toRegion.regionName} (${toRegionId})`);\r\n\r\n            // Fetch and process market orders\r\n            const transformedData = await fetchAndProcessMarketOrders(fromRegionId, toRegionId, formData);\r\n\r\n            if (transformedData.length > 0) {\r\n                setResults(transformedData);\r\n                // Show banner only when routes were derived from snapshots (not precomputed)\r\n                setUsingFallback(transformedData.some(r => r._rawData && r._rawData._fallback));\r\n                setShowResults(true);\r\n            } else {\r\n                setError('No profitable trades found for the selected criteria.');\r\n            }\r\n        } catch (error) {\r\n            setError(error.message);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    // Sorting handler\r\n    const handleSort = (key) => {\r\n        setSortConfig(prev => {\r\n            if (prev.key === key) {\r\n                return { key, direction: prev.direction === 'asc' ? 'desc' : 'asc' };\r\n            }\r\n            return { key, direction: 'asc' };\r\n        });\r\n    };\r\n\r\n    // Sorted results based on sort config\r\n    const sortedResults = useMemo(() => {\r\n        if (!sortConfig.key) return results;\r\n        const sorted = [...results];\r\n        sorted.sort((a, b) => {\r\n            const getValue = (item, key) => {\r\n                switch (key) {\r\n                    case 'Item': return item.Item || '';\r\n                    case 'From': return (item.From && item.From.name) || item.From || '';\r\n                    case 'To': return (item.To && item.To.name) || item['Take To'] || '';\r\n                    case 'Quantity': return item['Quantity'] || 0;\r\n                    case 'Buy Price': return item['Buy Price'] || 0;\r\n                    case 'Total Buy Price': return (item['Buy Price'] || 0) * (item['Quantity'] || 0);\r\n                    case 'Sell Price': return item['Sell Price'] || 0;\r\n                    case 'Net Profit': return item['Total Profit'] || 0;\r\n                    case 'Jumps': return typeof item.Jumps === 'number' ? item.Jumps : 0;\r\n                    case 'Profit per Jump': return typeof item.Jumps === 'number' && item['Total Profit'] ? item['Total Profit'] / item.Jumps : 0;\r\n                    case 'Profit Per Item': return item['Profit Per Unit'] || 0;\r\n                    case 'ROI': return item['Profit Percentage'] || 0;\r\n                    case 'Total Volume (m³)': return item['Total Volume (m3)'] || 0;\r\n                    default: return item[key] || '';\r\n                }\r\n            };\r\n            const aVal = getValue(a, sortConfig.key);\r\n            const bVal = getValue(b, sortConfig.key);\r\n            if (typeof aVal === 'number' && typeof bVal === 'number') {\r\n                return sortConfig.direction === 'asc' ? aVal - bVal : bVal - aVal;\r\n            }\r\n            return sortConfig.direction === 'asc'\r\n                ? String(aVal).localeCompare(String(bVal))\r\n                : String(bVal).localeCompare(String(aVal));\r\n        });\r\n        return sorted;\r\n    }, [results, sortConfig]);\r\n\r\n    const clearResults = () => {\r\n        setResults([]);\r\n        setError(null);\r\n        setCurrentPage(1);\r\n        setUsingFallback(false);\r\n        setShowResults(false);\r\n        // Do not reset lastResultsAt; it reflects GitHub data/ last commit, not search time\r\n    };\r\n\r\n    // On mount, fetch last commit time for data/ and refresh it periodically; tick every second for display\r\n    useEffect(() => {\r\n        let mounted = true;\r\n        const fetchCommit = async () => {\r\n            try {\r\n                const iso = await fetchDataLastCommitTime();\r\n                if (mounted && iso) setLastResultsAt(new Date(iso).getTime());\r\n            } catch { /* noop */ }\r\n        };\r\n        // Initial fetch\r\n        fetchCommit();\r\n        // Refresh every 60s to capture new publishes while page is open\r\n        const refreshId = setInterval(fetchCommit, 60_000);\r\n        // UI tick every second\r\n        const uiTickId = setInterval(() => setNowTick(Date.now()), 1_000);\r\n        return () => { mounted = false; clearInterval(refreshId); clearInterval(uiTickId); };\r\n    }, []);\r\n\r\n    const renderSinceLastUpdate = () => {\r\n        if (!lastResultsAt) return '—';\r\n        const diffMs = Math.max(0, nowTick - lastResultsAt);\r\n        const minutes = Math.floor(diffMs / 60000);\r\n        const seconds = Math.floor((diffMs % 60000) / 1000);\r\n        return `${minutes}m ${seconds}s`;\r\n    };\r\n\r\n    if (!regionsData) {\r\n        return (\r\n            <div className=\"region-hauling\">\r\n                <div className=\"loading-container\">\r\n                    <p>Loading regions...</p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"region-hauling\">\r\n            <div className=\"static-header\">\r\n                {/* Pink area: Static header */}\r\n                <div className=\"page-header\">\r\n                    <h1>Region to Region Trading</h1>\r\n                    <p className=\"disclaimer\">This feature is still a WIP and may have issues.</p>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"scrollable-content\">\r\n                {/* Red area: Scrollable content */}\r\n                <div className=\"hauling-form\">\r\n                    <form onSubmit={handleSubmit}>\r\n                        <div className=\"form-container\">\r\n                            <div\r\n                                className=\"form-row form-row-main\"\r\n                                style={{\r\n                                    display: 'flex',\r\n                                    justifyContent: 'center',\r\n                                    alignItems: 'center',\r\n                                    flexWrap: 'nowrap',\r\n                                    gap: '20px',\r\n                                    padding: '0 20px',\r\n                                    overflowX: 'auto',\r\n                                    margin: '0 auto 10px auto',\r\n                                }}\r\n                            >\r\n                                <div className=\"form-group region-group\">\r\n                                    <label>Starting Region</label>\r\n                                    <RegionSelector\r\n                                        selectedRegion={formData.fromRegion}\r\n                                        onRegionChange={handleFromRegionChange}\r\n                                        allowAllRegions={false}\r\n                                    />\r\n                                </div>\r\n\r\n                                <div className=\"form-group region-group\">\r\n                                    <label>Ending Region</label>\r\n                                    {formData.nearbyOnly ? (\r\n                                        <div className=\"nearby-region-display\">…</div>\r\n                                    ) : (\r\n                                        <RegionSelector\r\n                                            selectedRegion={formData.toRegion}\r\n                                            onRegionChange={handleToRegionChange}\r\n                                            allowAllRegions={false}\r\n                                        />\r\n                                    )}\r\n                                </div>\r\n\r\n                                <div className=\"form-group\">\r\n                                    <label>Security</label>\r\n                                    <select\r\n                                        value={formData.securityStatus}\r\n                                        onChange={e => handleInputChange('securityStatus', e.target.value)}\r\n                                        className=\"form-control\"\r\n                                        style={{ width: '115px' }}\r\n                                    >\r\n                                        {securityStatusOptions.map(o => (\r\n                                            <option key={o.value} value={o.value}>{o.label}</option>\r\n                                        ))}\r\n                                    </select>\r\n                                </div>\r\n\r\n                                <div className=\"form-group\">\r\n                                    <label>Stations/Structures</label>\r\n                                    <select\r\n                                        value={formData.structureType}\r\n                                        onChange={e => handleInputChange('structureType', e.target.value)}\r\n                                        className=\"form-control\"\r\n                                        style={{ width: '165px' }}\r\n                                    >\r\n                                        {structureTypeOptions.map(o => (\r\n                                            <option key={o.value} value={o.value}>{o.label}</option>\r\n                                        ))}\r\n                                    </select>\r\n                                </div>\r\n\r\n                                <div className=\"form-group\">\r\n                                    <label>Route</label>\r\n                                    <select\r\n                                        value={formData.routePreference}\r\n                                        onChange={e => handleInputChange('routePreference', e.target.value)}\r\n                                        className=\"form-control\"\r\n                                        style={{ width: '155px' }}\r\n                                    >\r\n                                        {routePreferenceOptions.map(o => (\r\n                                            <option key={o.value} value={o.value}>{o.label}</option>\r\n                                        ))}\r\n                                    </select>\r\n                                </div>\r\n\r\n                                <div className=\"form-group\">\r\n                                    <label>Max Jumps</label>\r\n                                    <input\r\n                                        type=\"number\"\r\n                                        value={formData.maxJumps ?? ''}\r\n                                        onChange={e => handleInputChange('maxJumps', e.target.value)}\r\n                                        placeholder=\"∞\"\r\n                                        className=\"form-control\"\r\n                                        style={{ width: '80px' }}\r\n                                    />\r\n                                </div>\r\n\r\n                                <div className=\"form-group\">\r\n                                    <label>Max Budget</label>\r\n                                    <input\r\n                                        type=\"number\"\r\n                                        value={formData.maxBudget ?? ''}\r\n                                        onChange={e => handleInputChange('maxBudget', e.target.value)}\r\n                                        placeholder=\"∞\"\r\n                                        className=\"form-control\"\r\n                                        style={{ width: '165px' }}\r\n                                    />\r\n                                </div>\r\n\r\n                                <div className=\"form-group\">\r\n                                    <label>Max Capacity (m³)</label>\r\n                                    <input\r\n                                        type=\"number\"\r\n                                        value={formData.maxWeight ?? ''}\r\n                                        onChange={e => handleInputChange('maxWeight', e.target.value)}\r\n                                        placeholder=\"∞\"\r\n                                        className=\"form-control\"\r\n                                        style={{ width: '135px' }}\r\n                                    />\r\n                                </div>\r\n\r\n                                <div className=\"form-group\">\r\n                                    <label>Sales Tax</label>\r\n                                    <select\r\n                                        value={formData.salesTax}\r\n                                        onChange={e => handleInputChange('salesTax', Number(e.target.value))}\r\n                                        className=\"form-control\"\r\n                                        style={{ width: '155px' }}\r\n                                    >\r\n                                        {salesTaxOptions.map(o => (\r\n                                            <option key={o.level} value={o.tax}>{o.label}</option>\r\n                                        ))}\r\n                                    </select>\r\n                                </div>\r\n\r\n                                <div className=\"form-group\">\r\n                                    <label>Min Profit</label>\r\n                                    <input\r\n                                        type=\"number\"\r\n                                        value={formData.minProfit ?? ''}\r\n                                        onChange={e => handleInputChange('minProfit', e.target.value)}\r\n                                        placeholder=\"0\"\r\n                                        className=\"form-control\"\r\n                                        style={{ width: '175px' }}\r\n                                    />\r\n                                </div>\r\n\r\n                                <div className=\"form-group\">\r\n                                    <label>Min ROI %</label>\r\n                                    <input\r\n                                        type=\"number\"\r\n                                        value={formData.minROI ?? ''}\r\n                                        onChange={e => handleInputChange('minROI', e.target.value)}\r\n                                        placeholder=\"0\"\r\n                                        className=\"form-control\"\r\n                                        style={{ width: '100px' }}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        {error && (\r\n                            <div className=\"error-message\">\r\n                                {error}\r\n                            </div>\r\n                        )}\r\n\r\n                        <div className=\"form-actions\">\r\n                            <button\r\n                                type=\"submit\"\r\n                                disabled={loading || !formData.fromRegion || !formData.toRegion}\r\n                                className=\"eve-button\"\r\n                            >\r\n                                {loading ? 'Searching...' : 'Find Trade Routes'}\r\n                            </button>\r\n                            <span\r\n                                className=\"update-timer\"\r\n                                title={lastResultsAt ? new Date(lastResultsAt).toLocaleString() : ''}\r\n                                style={{ marginLeft: '16px', color: '#ccc', fontSize: '0.95rem', whiteSpace: 'nowrap' }}\r\n                            >\r\n                                Time Since Last Update: {renderSinceLastUpdate()}\r\n                            </span>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n\r\n                {showResults && sortedResults.length > 0 && (\r\n                    <div className=\"results-container\">\r\n                        <div className=\"results-header\">\r\n                            <h2>Trade Route Results ({sortedResults.length} found)</h2>\r\n                            {/* Snapshot banner removed; snapshots are the live source */}\r\n                            <button\r\n                                onClick={clearResults}\r\n                                className=\"new-search-btn\"\r\n                            >\r\n                                Clear Results\r\n                            </button>\r\n                        </div>\r\n                        <div className=\"results-table-container\">\r\n                            <table className=\"results-table wide-table\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <HeaderCell label=\"Item\" />\r\n                                        <HeaderCell label=\"From\" />\r\n                                        <HeaderCell label=\"Quantity\" />\r\n                                        <HeaderCell label=\"Buy Price\" />\r\n                                        <HeaderCell label=\"Total Buy Price\" />\r\n                                        <HeaderCell label=\"To\" />\r\n                                        <HeaderCell label=\"Sell Price\" />\r\n                                        <HeaderCell label=\"Net Profit\" />\r\n                                        <HeaderCell label=\"Jumps\" />\r\n                                        <HeaderCell label=\"Profit per Jump\" />\r\n                                        <HeaderCell label=\"Profit Per Item\" />\r\n                                        <HeaderCell label=\"ROI\" />\r\n                                        <HeaderCell label=\"Total Volume (m³)\" />\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {(() => {\r\n                                        // Calculate pagination\r\n                                        const startIndex = (currentPage - 1) * itemsPerPage;\r\n                                        const endIndex = startIndex + itemsPerPage;\r\n                                        const paginatedResults = sortedResults.slice(startIndex, endIndex);\r\n\r\n                                        return paginatedResults.map((result, index) => {\r\n                                            // Extract values from the new data structure\r\n                                            const item = result.Item || 'Unknown Item';\r\n                                            const fromStation = result.From || {};\r\n                                            const toStation = result['To'] || result['Take To'] || {};\r\n                                            const buyPrice = result['Buy Price'] || 0;\r\n                                            const sellPrice = result['Sell Price'] || 0;\r\n                                            const profitPerUnit = result['Profit Per Unit'] || 0;\r\n                                            const profitPercentage = result['Profit Percentage'] || 0;\r\n                                            const totalProfit = result['Total Profit'] || 0;\r\n                                            const quantity = result['Quantity'] || 0;\r\n                                            const totalVolume = result['Total Volume (m3)'] || 0;\r\n                                            const jumps = result.Jumps || 'N/A';\r\n                                            // Calculate total buy price and profit per jump\r\n                                            const totalBuyPrice = buyPrice * quantity;\r\n                                            const profitPerJump = (typeof jumps === 'number' && jumps > 0)\r\n                                                ? totalProfit / jumps\r\n                                                : null;\r\n\r\n                                            // Render station names with security coloring and click-to-copy\r\n                                            const renderStationName = (station) => {\r\n                                                if (typeof station === 'string') {\r\n                                                    return (\r\n                                                        <span\r\n                                                            className=\"clickable-location\"\r\n                                                            onClick={() => copyToClipboard(station)}\r\n                                                            title=\"Click to copy to clipboard\"\r\n                                                        >\r\n                                                            {station}\r\n                                                        </span>\r\n                                                    );\r\n                                                }\r\n\r\n                                                const stationName = station.name || 'Unknown Station';\r\n                                                const security = station.security;\r\n                                                const isNPC = station.isNPC;\r\n\r\n                                                let color = '#ffffff'; // Default color\r\n                                                if (security !== null && security !== undefined) {\r\n                                                    color = getSecurityColor(security);\r\n                                                }\r\n\r\n                                                return (\r\n                                                    <span\r\n                                                        className=\"clickable-location\"\r\n                                                        style={{ color }}\r\n                                                        onClick={() => copyToClipboard(stationName)}\r\n                                                        title={`Security: ${security !== null && security !== undefined ? security.toFixed(1) : 'Unknown'} | ${isNPC ? 'NPC Station' : 'Player Structure'} | Click to copy`}\r\n                                                    >\r\n                                                        {stationName}\r\n                                                    </span>\r\n                                                );\r\n                                            };\r\n\r\n                                            return (\r\n                                                <tr key={startIndex + index}>\r\n                                                    <td style={cellStyle('Item')}>\r\n                                                        <span\r\n                                                            className=\"clickable-location\"\r\n                                                            onClick={() => copyToClipboard(item)}\r\n                                                            title=\"Click to copy item name\"\r\n                                                        >\r\n                                                            {item}\r\n                                                        </span>\r\n                                                    </td>\r\n                                                    <td style={cellStyle('From')}>{renderStationName(fromStation)}</td>\r\n                                                    <td style={cellStyle('Quantity')}>{utils.formatNumber(quantity, 0)}</td>\r\n                                                    <td style={cellStyle('Buy Price')}>{utils.formatNumber(buyPrice)}</td>\r\n                                                    <td style={cellStyle('Total Buy Price')}>{utils.formatNumber(totalBuyPrice)}</td>\r\n                                                    <td style={cellStyle('To')}>{renderStationName(toStation)}</td>\r\n                                                    <td style={cellStyle('Sell Price')}>{utils.formatNumber(sellPrice)}</td>\r\n                                                    <td style={cellStyle('Net Profit')}>{utils.formatNumber(totalProfit)}</td>\r\n                                                    <td style={cellStyle('Jumps')}>{(typeof jumps === 'number') ? jumps : 'N/A'}</td>\r\n                                                    <td style={cellStyle('Profit per Jump')}>{profitPerJump != null ? utils.formatNumber(profitPerJump) : '-'}</td>\r\n                                                    <td style={cellStyle('Profit Per Item')}>{utils.formatNumber(profitPerUnit)}</td>\r\n                                                    <td style={cellStyle('ROI')}>{utils.formatNumber(profitPercentage, 1)}%</td>\r\n                                                    <td style={cellStyle('Total Volume (m³)')}>{utils.formatNumber(totalVolume, 0)}</td>\r\n                                                </tr>\r\n                                            );\r\n                                        });\r\n                                    })()}\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n\r\n                        {/* Pagination */}\r\n                        {sortedResults.length > itemsPerPage && (\r\n                            <div className=\"pagination-container\">\r\n                                <div className=\"pagination\">\r\n                                    <button\r\n                                        onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\r\n                                        disabled={currentPage === 1}\r\n                                        className=\"pagination-btn\"\r\n                                    >\r\n                                        Previous\r\n                                    </button>\r\n\r\n                                    <span className=\"pagination-info\">\r\n                                        Page {currentPage} of {Math.ceil(sortedResults.length / itemsPerPage)}\r\n                                        ({sortedResults.length} total results)\r\n                                    </span>\r\n\r\n                                    <button\r\n                                        onClick={() => setCurrentPage(prev => Math.min(prev + 1, Math.ceil(sortedResults.length / itemsPerPage)))}\r\n                                        disabled={currentPage >= Math.ceil(sortedResults.length / itemsPerPage)}\r\n                                        className=\"pagination-btn\"\r\n                                    >\r\n                                        Next\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                )}\r\n            </div>\r\n\r\n            <div\r\n                className=\"return-to-top\"\r\n                onClick={() => window.scrollTo({ top: 0, behavior: 'smooth' })}\r\n                title=\"Return to Top\"\r\n            >\r\n                ↑\r\n            </div>\r\n        </div>\r\n    );\r\n}"],"names":["utils","value","decimals","isNaN","parseFloat","toLocaleString","minimumFractionDigits","maximumFractionDigits","INITIAL_FORM","fromRegion","toRegion","nearbyOnly","minProfit","maxWeight","minROI","maxJumps","maxBudget","salesTax","securityStatus","structureType","routePreference","hideOutOfStock","RegionHauling","formData","setFormData","useState","regionsData","setRegionsData","marketTree","setMarketTree","loading","setLoading","results","setResults","error","setError","usingFallback","setUsingFallback","nearbyRegions","setNearbyRegions","currentPage","setCurrentPage","itemsPerPage","isFormSticky","setIsFormSticky","formCollapsed","setFormCollapsed","sortConfig","setSortConfig","key","direction","showResults","setShowResults","lastResultsAt","setLastResultsAt","nowTick","setNowTick","Date","now","colWidths","setColWidths","Item","From","Quantity","To","Jumps","ROI","HeaderCell","label","width","jsxs","onClick","handleSort","style","minWidth","maxWidth","position","children","jsx","className","onMouseDown","e","stopPropagation","startX","startWidth","onMove","dx","clientX","prev","Math","max","min","round","onUp","window","removeEventListener","addEventListener","startResize","title","cellStyle","fetchItemDetails","cache","async","typeId","tree","fetchMarketTree","map","Map","walk","node","Array","isArray","items","it","id","Number","typeID","has","set","name","typeName","volume","k","Object","keys","buildIndex","rec","get","jumpCache","React","useRef","calculateJumps","fromSystemId","toSystemId","current","hops","fetchRouteJumps","useEffect","handleScroll","formElement","document","querySelector","formRect","getBoundingClientRect","navbarHeight","top","copyToClipboard","text","navigator","clipboard","writeText","err","fetchRegions","then","regions","catch","console","useMemo","region","regionID","region_id","regionName","region_name","length","handleInputChange","field","fetchAndProcessMarketOrders","fromRegionId","toRegionId","profitableTrades","fetchRegionHaulingSnapshotsOnly","filter","route","unitProfit","profit_per_unit","buy_price","sell_price","quantity","max_volume","totalProfit","total_profit","roi","profit_margin","meetsProfit","totalBuyCost","meetsBudget","apiData","structures","stations","Promise","all","fetchStructures","fetchStationsNPC","stationMap","s","station_id","stationID","structMap","structureID","cargoCapacity","transformedTrades","trade","itemDetails","type_id","maxUnits","cargoLimitedUnits","floor","budget","unitPrice","budgetLimitedUnits","totalVolume","originStationName","destinationStationName","originIsNPC","destinationIsNPC","jumps","originInfo","destInfo","origin_name","destination_name","origin_is_npc","destination_is_npc","originId","origin_id","from_location","source_station_id","destId","destination_id","to_location","destination_station_id","warn","originIsNpcComputed","type","is_npc","destIsNpcComputed","origin_system_id","system_id","systemID","solarSystemID","destination_system_id","originSecurity","origin_security","security_status","security","destSecurity","destination_security","profitPerJump","profit_per_jump","push","isNPC","systemId","_rawData","finalTrades","t","minProfitFilter","minRoiFilter","maxBudgetFilter","qty","totalBuy","roiPct","isHigh","isLow","isNull","os","ds","oNpc","dNpc","isFinite","transformApiResponseToDisplayFormat","Error","sortedResults","sorted","sort","a","b","getValue","item","aVal","bVal","String","localeCompare","mounted","fetchCommit","iso","fetchDataLastCommitTime","getTime","refreshId","setInterval","uiTickId","clearInterval","onSubmit","preventDefault","log","transformedData","some","r","_fallback","message","display","justifyContent","alignItems","flexWrap","gap","padding","overflowX","margin","RegionSelector","selectedRegion","onRegionChange","allowAllRegions","onChange","target","o","placeholder","level","tax","disabled","marginLeft","color","fontSize","whiteSpace","diffMs","renderSinceLastUpdate","startIndex","endIndex","slice","result","index","fromStation","toStation","buyPrice","sellPrice","profitPerUnit","profitPercentage","totalBuyPrice","renderStationName","station","stationName","getSecurityColor","toFixed","ceil","scrollTo","behavior"],"mappings":"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"}