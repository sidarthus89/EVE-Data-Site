import{l as t,A as e,k as r,E as a,m as n,n as o,j as s,i}from"./common-BOMxUclB.js";const c="marketHistoryCache.v1";async function l(n,o=null,s=null,i=null){const c=new URLSearchParams({type_id:n});o&&c.append("region_id",o),s&&c.append("location_id",s),null!==i&&c.append("is_buy_order",i);try{if(o)try{const e=await t(o);if(e&&e.best_quotes&&e.best_quotes[n]){const t=e.best_quotes[n],r=t.best_buy?[{...t.best_buy,is_buy_order:!0,type_id:n,region_id:o}]:[];return{buyOrders:r,sellOrders:t.best_sell?[{...t.best_sell,is_buy_order:!1,type_id:n,region_id:o}]:[],meta:{source:"snapshot",last_updated:e.last_updated}}}}catch{}const a=`${e}/market/orders?${c}`,s=await r(a,{},1);if(!s||"object"!=typeof s)throw new Error("Invalid response structure from Azure");return{buyOrders:s.buyOrders||[],sellOrders:s.sellOrders||[],meta:s.meta||{}}}catch(l){if(!o)return{buyOrders:[],sellOrders:[]};const t=`${a}/markets/${o}/orders/?type_id=${n}`;try{const e=(await r(t,{},1)).map(t=>({...t,name:"Unknown",region_name:`Region ${o}`,security:null,location_type:"Unknown",is_npc:!1}));return{buyOrders:e.filter(t=>t.is_buy_order),sellOrders:e.filter(t=>!t.is_buy_order)}}catch(u){return{buyOrders:[],sellOrders:[]}}}}async function u(t,n,o=365){const s=`${t}:${n}`,i=function(){try{const t=localStorage.getItem(c);return t?JSON.parse(t):{}}catch{return{}}}(),l=Date.now(),u=i[s];if(u&&Array.isArray(u.data)){if(new Date(u.lastUpdated).toDateString()===new Date(l).toDateString())return u.data}const m=new URLSearchParams({type_id:t,region_id:n,days:o}),y=`${e}/market/history?${m}`;try{const t=await fetch(y);if(!t.ok)throw new Error(`Failed to fetch market history: ${t.statusText} (${t.status})`);return d(s,l,i,u,await t.json())}catch(_){try{const e=`${a}/markets/${n}/history/?type_id=${t}`;return d(s,l,i,u,await r(e,{},1))}catch(p){if(u&&Array.isArray(u.data))return u.data;throw p}}}function d(t,e,r,a,n){const o=(Array.isArray(n)?n:[]).filter(t=>t&&t.date).sort((t,e)=>new Date(t.date)-new Date(e.date)).slice(-365);let s=o;if(a&&Array.isArray(a.data)&&a.data.length){const t=new Map(a.data.map(t=>[t.date,t]));for(const e of o)t.set(e.date,e);s=Array.from(t.values()).sort((t,e)=>new Date(t.date)-new Date(e.date)).slice(-365)}return r[t]={lastUpdated:e,data:s},function(t){try{localStorage.setItem(c,JSON.stringify(t))}catch{}}(r),s}async function m(t){const e=await Promise.all([10000002,10000043,10000032,10000030,10000042].map(async e=>{try{const r=await u(t,e);return r&&r.length,r}catch(r){return[]}})),r=new Map;e.forEach((t,e)=>{Array.isArray(t)&&t.forEach(t=>{const e=t.date;r.has(e)||r.set(e,{date:e,totalVolume:0,totalValue:0,highest:0,lowest:1/0,orderCount:0});const a=r.get(e),n=t.volume||0,o=t.average||0;a.totalVolume+=n,a.totalValue+=n*o,a.highest=Math.max(a.highest,t.highest||0),a.lowest=Math.min(a.lowest,t.lowest||a.lowest),a.orderCount+=t.order_count||0})});const a=Array.from(r.values()).map(t=>({date:t.date,average:t.totalVolume>0?t.totalValue/t.totalVolume:0,totalVolume:t.totalVolume,highest:t.highest,lowest:t.lowest===1/0?0:t.lowest,order_count:t.orderCount})).sort((t,e)=>new Date(t.date)-new Date(e.date));return a.length,a}async function y(t,c=null,l=2e3){const u=new URLSearchParams({from_region:t,limit:String(l)});c&&u.append("to_region",c);const d=`${e}/region_hauling?${u.toString()}`;try{try{const e=await n(t,c||t);if(e&&Array.isArray(e.routes))return e.routes;if(Array.isArray(e))return e}catch{}const e=await fetch(d);if(!e.ok)throw new Error(`HTTP ${e.status}: ${e.statusText}`);return(await e.json()).routes||[]}catch(m){try{const e=await async function(t,e=null){const n=await o(),c=[],l=t=>{t.items&&t.items.forEach(t=>{c.push({typeId:Number(t.typeID),name:t.typeName,volume:t.volume||.01})}),Object.keys(t).forEach(e=>{"items"!==e&&"_info"!==e&&"object"==typeof t[e]&&l(t[e])})};l(n);const u=[];let d=[],m=[];try{const[t,e]=await Promise.all([s(),i()]);Array.isArray(t)?d=t:t&&"object"==typeof t&&(d=Object.entries(t).map(([t,e])=>({station_id:Number(t),...e}))),m=Array.isArray(e)?e:[]}catch(h){}const y=new Map(d.map(t=>[Number(t.station_id??t.stationID),t])),_=new Map(m.map(t=>[Number(t.structureID??t.stationID),t])),p=e||t;async function f(t,e){const n=`${a}/markets/${e}/orders/?type_id=${t}`,o=await r(n,{},1);return{sellOrders:o.filter(t=>!t.is_buy_order),buyOrders:o.filter(t=>t.is_buy_order)}}for(const r of c){const{typeId:e}=r;try{const{sellOrders:a}=await f(e,t),{buyOrders:n}=await f(e,p);if(a.length>0&&n.length>0){const t=Math.min(...a.map(t=>t.price)),e=Math.max(...n.map(t=>t.price));if(e>t){const o=e-t,s=o/t*100,i=a.find(e=>e.price===t),c=n.find(t=>t.price===e),l=Math.min(i?.volume_remain||0,c?.volume_remain||0),d=y.get(Number(i?.location_id))||_.get(Number(i?.location_id))||{},m=y.get(Number(c?.location_id))||_.get(Number(c?.location_id))||{},p=i?.name||i?.location_name||d.name||d.stationName||d.locationName||"Unknown Station",f=c?.name||c?.location_name||m.name||m.stationName||m.locationName||"Unknown Station",h=d.system_id??d.systemID??d.solarSystemID??null,w=m.system_id??m.systemID??m.solarSystemID??null,g=i?.security??d.security??d.security_status??null,b=c?.security??m.security??m.security_status??null,$="number"!=typeof i?.location_id||i.location_id<1e12,A="number"!=typeof c?.location_id||c.location_id<1e12;u.push({type_id:r.typeId,item_name:r.name,item_volume:r.volume,origin_id:i?.location_id||0,origin_system_id:h||null,destination_id:c?.location_id||0,destination_system_id:w||null,origin_name:p,destination_name:f,origin_security:g,destination_security:b,origin_is_npc:$,destination_is_npc:A,sell_price:t,buy_price:e,profit_per_unit:o,profit_margin:s,max_volume:l,_fallback:!0})}}}catch(w){}}return u.filter(t=>t.profit_margin>1).sort((t,e)=>e.profit_margin-t.profit_margin).slice(0,50)}(t,c);return e}catch(y){throw new Error(`Azure Functions unavailable (${m.message}). Fallback failed: ${y.message}`)}}}export{u as a,l as b,y as c,m as f};
